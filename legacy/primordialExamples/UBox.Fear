//the type mut UBox[readOnly E] not well formed, it is thus demoted to readOnly UBox[readOnly E]
//calling a method on a mdf Store[E] that returns a mut::E
//returns a E!mdf::E, for mdf=mut E!mut::E == mut::E

UBox[E]:NoMutHyg[mdf E]{
  readOnly * : recMdf E, //Ref[mut::E]*() : recMdf E ==E!mut::E == mut::E
  mut .swap(e: E): E
}

UBox:{
  #[E](e:E): mut UBox[mdf E] ->Let#{
    .var  -> Ref#e,
    .in(r)-> {//mut UBox[E]
      *->r*,
      .swap(e)->r.swap(e) 
      }
    }
  }
-----------------
//CRUCIAL TS consideration
//.swap: it is a mut method, so if it is ever executable on a E!mut object type,
//then E was not read, so we can capture it as if E was not allowed to be Read
//It can be imm or mut

1 imm imm      UBox#(5) : mut UBox[imm Num] -promote-> imm UBox[imm Num]
2 readOnly imm     UBox#(5) : readOnly UBox[imm Num]
3 mut imm      UBox#(5) : mut UBox[imm Num]

//NO imm readOnly == imm imm c1
//  UBox#[readOnly UBox[imm Num]](UBox#(5)) : imm UBox[readOnly UBox[imm Num]]
4 readOnly readOnly    UBox#(myReadUBox) : readOnly UBox[readOnly UBox[imm Num]]
//NO mut read
//  UBox#[readOnly UBox[imm Num]](UBox#(5)) : mut UBox[readOnly UBox[imm Num]] //ill typed

//NO imm mut ==imm imm c2
//  UBox#[mut UBox[imm Num]](UBox#(5)) : imm UBox[mut UBox[imm Num]]
//NO readOnly mut == readOnly readOnly c3
//  UBox#[mut UBox[imm Num]](UBox#(5)) : readOnly UBox[mut UBox[imm Num]]
5 mut mut    UBox#(UBox#(5)) : mut UBox[mut UBox[imm Num]]