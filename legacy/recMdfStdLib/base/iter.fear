package base

Iter[E:imm,mut]:{
  mut .next: mut Opt[mdf E],
  mut .find(p: mut IterPredicate[mdf E]): mut Opt[mdf E] -> this.next.match{
    .some(x) -> p#x ? { .then -> mut Opt#x, .else -> this.find(p) },
    .none -> {}
    },
  mut .allMatch(p: mut IterPredicate[mdf E]): Bool -> this.find{x -> p#x .not}.match{
    .some(_) -> False,
    .none -> True
    },
  mut .anyMatch(p: mut IterPredicate[mdf E]): Bool -> this.find(p).match{
    .some(_) -> True,
    .none -> False
    },

  mut .map[R:imm,mut](f: mut IterMapper[mdf E, mdf R]): mut Iter[mdf R] -> { this.next.map(f) },
  mut .flatMap[R:imm,mut](f: mut IterMapper[mdf E, mut Iter[mdf R]]): mut Iter[mdf R] -> Block#
    .let[mut Iter[mut Iter[mdf R]]] mapIter = { this.map(f) }
    .let[mut Ref[mut Opt[mut Iter[mdf R]]]] optCurIter = { Ref#(mapIter.next) }
    .return(mut ReturnStmt[mut Iter[mdf R]]{ mut Iter[mdf R]{ 'self
      .next -> optCurIter*.match{
        .some(curIter) -> curIter.next.match{
          .some(next) -> mut Opt#next,
          .none -> Block#(optCurIter := (mapIter.next), self.next)
          },
        .none -> {}
        }
      }}),
  mut .filter(p: mut IterPredicate[mdf E]): mut Iter[mdf E] -> { .next -> this.find(p) },

  mut .fold[R:imm,mut](acc: mdf R, f: mut IterFolder[mdf E, mdf R]): mdf R -> this.next.match{
    .some(e) -> this.fold(f#(acc, e), f),
    .none -> acc
    },
  mut .for(f: mut IterForEacher[mdf E]): Void -> this.next.match{
    .some(e) -> Block#(f#e, this.for(f)),
    .none -> {}
    },

  mut .count: UInt -> this.fold[UInt](0, mut IterFolder[mdf E, UInt]{ acc, _ -> acc + 1 }),
  mut .list: mut List[mdf E] -> this.fold(List#[mdf E], { acc, e -> Block#(acc.add(e), acc) }),
  mut .llist: mut LList[mdf E] -> this.fold(mut LList[mdf E], { acc, e -> mut LList.cons(e, acc) }),
  mut .str(toStr: mut IterMapper[mdf E, Str], joining: Str): Str -> this.map(toStr)
    .fold[Str]("", mut IterFolder[Str, Str]{ acc, e ->
      acc.size == 0 ? { .then -> acc + e, .else -> acc + joining + e } })
  }

Sum:{
  .int(ns: mut Iter[Int]): Int -> ns.fold[Int](0, mut IterFolder[Int, Int]{ acc, n -> acc + n }),
  .uint(ns: mut Iter[UInt]): UInt -> ns.fold[UInt](0, mut IterFolder[UInt, UInt]{ acc, n -> acc + n }),
  .float(ns: mut Iter[Float]): Float -> ns.fold[Float](0.0, mut IterFolder[Float, Float]{ acc, n -> acc + n }),
  }

IterForEacher[E]:{ mut #(e: mdf E): Void }
IterFolder[E,R]:{ mut #(acc: mdf R, e: mdf E): mdf R }
//IterScanner[E, R, S: mut,imm]:{ lent #(state: mut Ref[mdf S], e: mdf E): mdf S }
IterMapper[E,R]:OptMap[mdf E, mdf R]
IterPredicate[E]:{ mut #(e: mdf E): Bool }

_ListIsoAdd[E]:{
  #(l: mut List[mdf E], e: mdf E): mut List[mdf E] -> Block#(l.add(e), l),
  }
