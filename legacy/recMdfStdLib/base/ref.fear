package base

Ref:{ #[X:imm,mut](x: mdf X): mut Ref[mdf X] -> this#(x) }
Ref[X:imm,mut]:Sealed{
  recMdf *: recMdf X,
  recMdf .get: recMdf X -> this*,
  mut .swap(x: mdf X): mdf X,
  mut :=(x: mdf X): Void -> Block#(this.swap(x)),
  mut .set(x: mdf X): Void -> this := x,
  mut <-(f: mut UpdateRef[mdf X]): mdf X -> this.swap(f#(this*)),
  mut .update(f: mut UpdateRef[mdf X]): mdf X -> this <- f,
  }
UpdateRef[X:imm,mut]:{ mut #(x: mdf X): mdf X }

Count[N:imm]:Ref[N]{
  mut ++: N,
  mut --: N,
  mut +=(n: N): N,
  mut -=(n: N): N,
  mut *=(n: N): N,
  }
Count:{
  #(n: Int): mut Count[Int] -> this.int(n),
  .int(n: Int): mut Count[Int] -> mut Let#(mut Let[mut Ref[Int], mut Count[Int]]{
    .var -> Ref#n,
    .in(c) -> {
      * -> c*,
      .swap(x) -> c.swap(x),
      ++ -> c <- { c' -> c' + 1 },
      -- -> c <- { c' -> c' - 1 },
      +=(n2) -> c <- { c' -> c' + n2 },
      -=(n2) -> c <- { c' -> c' - n2 },
      *=(n2) -> c <- { c' -> c' * n2 },
      }
    }),
  .uint(n: UInt): mut Count[UInt] -> mut Let#(mut Let[mut Ref[UInt], mut Count[UInt]]{
    .var -> Ref#n,
    .in(c) -> {
      * -> c*,
      .swap(x) -> c.swap(x),
      ++ -> c <- { c' -> c' + 1 },
      -- -> c <- { c' -> c' - 1 },
      +=(n2) -> c <- { c' -> c' + n2 },
      -=(n2) -> c <- { c' -> c' - n2 },
      *=(n2) -> c <- { c' -> c' * n2 },
      }
    })
  }
