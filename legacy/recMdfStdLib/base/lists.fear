package base

//LList:{
//  #[E](h: E): LList[E] -> { .match(m) -> m.elem(h, {}) },
//  .cons[E](h: E, t: LList[E]): LList[E] -> { .match(m) -> m.elem(h, t) },
//  }
//LList[E]:Sealed{
//  .match[R](m: mut LListMatch[E, mdf R]): mdf R -> m.empty,
//  .isEmpty: Bool -> this.match{ .empty -> True, .elem(_,_) -> False },
//  .len: UInt -> this.match{ .empty -> 0, .elem(_,t) -> t.len + 1, },
//  ++(l1: LList[E]): LList[E] -> this.match{
//    .empty -> l1,
//    .elem(h, t) -> LList.cons(h, t ++ l1)
//    },
//  +(e: E): LList[E] -> this ++ (LList#e),
//  .get(i: UInt): iso Opt[E] -> this.match[mut Opt[E]]{
//    .empty -> {},
//    .elem(h, t) -> (i == 0) ? { .then -> mut Opt#h, .else -> t.get(i - 1) }
//    },
//  .head: iso Opt[E] -> this.match[mut Opt[E]]{
//    .empty -> {},
//    .elem(h,_) -> mut Opt#h,
//    },
//  .tail: LList[E] -> this.match{
//    .empty -> {},
//    .elem(_,t) -> t,
//    },
//  .iter: mut Iter[E] -> Block#
//    .let[mut Ref[LList[E]]] cursor = { Ref#this }
//    .return{ mut #: mut Iter[E] -> { .next -> (cursor.swap(cursor*.tail)).head } },
//  }
//LListMatch[E,R]:{ mut .elem(head: E, tail: LList[E]): mdf R, mut .empty: mdf R }

LList:{
  recMdf #[E](head: recMdf E): recMdf LList[recMdf E] -> this.cons(head, {}),
  recMdf .cons[E](head: recMdf E, tail: recMdf LList[recMdf E]): recMdf LList[recMdf E] -> {'l
    .match(m) -> m.elem(head, tail),
    .head -> recMdf Opt#[recMdf E](head),
    .tail -> tail,
    .isEmpty -> False,
    .len -> tail.len + 1,
    .get(i) -> (i == 0).look(recMdf BoolView[recMdf Opt[recMdf E]]{
      .then -> recMdf Opt#head,
      .else -> tail.get(i - 1)
      }),
    recMdf .run[R](automaton: recMdf Automaton[recMdf E, mdf R]): recMdf Opt[recMdf R] ->
      l._run[mdf R](automaton, automaton.step(head)),
    recMdf ._run[R](
      automaton: recMdf Automaton[recMdf E, mdf R],
      out: recMdf Opt[recMdf base.iter.Output[recMdf E, recMdf R]]): recMdf Opt[recMdf R] ->
        out.matchHyg{
          .some(res) -> (tail.isEmpty || (res.completed)).look(recMdf BoolView[recMdf Opt[recMdf R]]{
            .then -> recMdf Opt#(res.result),
            .else -> tail.run(res.next).matchHyg{ .some(finalResult) -> recMdf Opt#finalResult, .none -> recMdf Opt#(res.result) }
            }),
          .none -> tail.run(automaton),
          },
    },
  }
LList[E]:Sealed{
  recMdf .match[R](m: mut LListMatch[recMdf E, mdf E, mdf R]): mdf R -> m.empty,
  recMdf .head: recMdf Opt[recMdf E] -> {},
  recMdf .tail: recMdf LList[mdf E] -> {},
  readOnly .isEmpty: Bool -> True,
  recMdf .len: UInt -> 0,
  recMdf .get(i: UInt): recMdf Opt[recMdf E] -> {},
  recMdf ++(l1: recMdf LList[recMdf E]): recMdf LList[recMdf E] -> this.head.matchHyg{
    .some(h) -> recMdf LList.cons(h, this.tail ++ l1),
    .none -> l1
    },
  recMdf +(e: recMdf E): recMdf LList[recMdf E] -> this ++ (recMdf LList#e),
//  recMdf ==(isEq: recMdf LListEq[recMdf E], other: recMdf LList[mdf E]): Bool -> recMdf base.iter.Automaton{
//    },
  mut .list: mut List[mdf E] -> List.fromLList(this),
  recMdf .run[R](automaton: recMdf Automaton[recMdf E, mdf R]): recMdf Opt[recMdf R] -> {},
  // TODO: probably delete this unless we want automaton methods on containers
  recMdf .allMatch(predicate: recMdf base.iter.Predicate[recMdf E]): recMdf Opt[Bool] -> this.run(recMdf Automaton.allMatch(predicate)),
//  recMdf ==(other: recMdf LList[mdf E]): Bool -> this.run(recMdf Automaton.allMatch(base.iter.Predicate[recMdf E]))
  }
LListMatch[E,TE,R]:{
  mut .elem(head: mdf E, tail: readOnly LList[mdf TE]): mdf R,
  mut .empty: mdf R,
  }
//LListEq[E]:{ mut #(self: mdf E, other: mdf E): Bool }
LListIter:{
  #[E:imm,mut](list: mut LList[mdf E]): mut Iter[mdf E] -> Block#
    .let[mut Ref[mut LList[mdf E]]] cursor = { Ref#list }
    .return{ mut #: mut Iter[mdf E] -> { .next -> (cursor.swap(cursor*.tail)).head } },
  .im[E:imm,mut](list: LList[E]): mut Iter[E] -> Block#
    .let[mut Ref[LList[E]]] cursor = { Ref#list }
    .return{ mut #: mut Iter[E] -> { .next -> (cursor.swap(cursor*.tail)).head.map{x->x} } }
  }
//_RunAutomaton[E,R]:{
//  recMdf .
//  }

List:{
  // TODO: something weird is happening in inference that is inferring [recMdf E] on these method calls
  #[E]: mut List[mdf E] -> this._new(Ref#mut _ListState[mdf E]),
  #[E](e: mdf E): mut List[mdf E] -> this.fromLList[mdf E](mut LList#e),
  #[E](e1: mdf E, e2: mdf E): mut List[mdf E] -> this.fromLList[mdf E](mut LList.cons(e1, mut LList#e2)),
  // TODO: this up to 12 or something
  #[E](e1: mdf E, e2: mdf E, e3: mdf E): mut List[mdf E] -> this.fromLList[mdf E](mut LList.cons(e1, mut LList.cons(e2, mut LList#e3))),
  .fromLList[E](list: mut LList[mdf E]): mut List[mdf E] -> this._new(Ref#(_ListState#[mdf E](list.len, list))),

  /// Note: This fearless implementation of a list may be replaced with a conventional expandable array list
  /// as magic for performance reasons.
  ._new[E](s: mut Ref[mut _ListState[mdf E]]): mut List[mdf E] -> { 'list
    .len -> s*.len,
    .isEmpty -> s*.inner.isEmpty,
//    .look(i) -> s*.inner.get(i),
    .get(i) -> s*.inner.get(i),
    .add(e) -> s := (_ListState#[mdf E](s*.len + 1, s*.inner + e)),
//    .iter -> Let#{
//      .var -> Count.uint(0),
//      .in(cursor) -> { .next -> list.look(cursor++) }
//      },
//    .iterMut -> Let#(mut Let[mut Count[UInt], mut Iter[mdf E]]{
//      .var -> Count.uint(0),
//      .in(cursor) -> { .next -> list.get(cursor++) }
//      }),
    }}
List[E]:Sealed{
  readOnly .len: UInt,
  readOnly .isEmpty: Bool,
//  readOnly .look(i: UInt): lent Opt[readOnly E],
  recMdf .get(i: UInt): recMdf Opt[mdf E],
  mut .add(e: mdf E): Void,
//  readOnly .iter: lent Iter[readOnly E],
//  mut .iterMut: mut Iter[mdf E],
  //mut .addAll(other: mut List[mdf E]): Void -> other.iterMut.for{ e -> this.add(e) },
  }
ListIter:{
  #[E:imm,mut](list: mut List[mdf E]): mut Iter[mdf E] -> this._impl(list, Count.uint(0)),
    ._impl[E:imm,mut](list: mut List[mdf E], cursor: mut Count[UInt]): mut Iter[mdf E] -> { list.get(cursor++) },
  .immList[E:imm,mut](list: List[E]): mut Iter[E] -> this._immImpl(list, Count.uint(0)),
    ._immImpl[E:imm,mut](list: List[mdf E], cursor: mut Count[UInt]): mut Iter[E] -> { list.get(cursor++).map{x->x} },
  }
_ListState[E]:{
  readOnly .len: UInt -> 0,
  recMdf .inner: recMdf LList[mdf E] -> {}
  }
_ListState:{
  #[E](len: UInt, inner: mut LList[mdf E]): mut _ListState[mdf E] -> {
    .len -> len,
    .inner -> inner
    }
  }
