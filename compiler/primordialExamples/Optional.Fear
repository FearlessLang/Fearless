Opt[T]:NoMutHyg[T]{
  readOnly .match[R](m: mut OptMatch[recMdf T, mdf R]): mdf R ->m.none,
  readOnly .map[R](f: mut OptMap[recMdf T,mdf R]): recMdf Opt[mdf R]->this.match(f),
  readOnly .do(f: mut OptDo[recMdf T])->this.match(f),
  readOnly .rMap[R](f: mut OptMap[readOnly T,mdf R]): recMdf Opt[mdf R]->this.match(f),
  readOnly .flatMap[R](f: mut OptFlatMap[recMdf T, mdf R]): recMdf Opt[mdf R]->this.match(f),
  .iMap[R](f: F[T,R]): Opt[R]->Cast(this).as[Opt[T]]({x->x}).match{
    .some(x)->f#x,
    .none->{}
    },
  readOnly isNone: Bool -> this.match{ .none -> True, .some(_) -> False },
  readOnly isSome: Bool -> this.match{ .none -> False, .some(_) -> True },
  }
OptMatch[T,R]:{ mut .some(x:mdf T): mdf R, mut .none: mdf R }
OptFlatMap[T,R]:OptMatch[mdf T,recMdf Opt[mdf R]]{ .none->{} }
OptMap[T,R]:OptMatch[mdf T,recMdf Opt[mdf R]]{
  mut #(t:mdf T):mdf R,
  .some(x) -> Opt#(this#x),
  .none->{}
  }
OptDo[T]:OptMatch[mdf T,Void]{
  mut #(t:mdf T):Void,
  .some(x) -> Opt#(this#x), 
  .none->{}
  }

Opt:{ #[T](x: T): mut Opt[T] -> {m->m.some(x)} }
-----------------------------------

Opt[mut Person] omp = Opt![mut Person] //mut Option[mut Person] 
mut Person bob = omp.match{
  .some(bob) -> bob //type error imm!=mut
  .none -> Error.str("AAAH")
  }
//fully inferred below
mut Person bob = omp.[mut Person]match(mut OptMatch[imm Person,mut Person]{
  .some(bob:imm Person) -> bob//type error imm!=mut
  .none -> _
  })
----------
//test all 3 Convertible conversions
//imm mut and imm readOnly -> imm imm
//readOnly mut -> readOnly readOnly
Opt[Person] iomp = omp//Ok because convertible

Opt[readOnly Person] romp =Opt![readOnly Person] //mut Option[readOnly Person]
Opt[Person] iomp =romp //Ok

readOnly Opt[mut Person] momp =Opt![mut Person] //mut Option[readOnly Person]
readOnly Opt[readOnly Person] rromp =momp //Ok

mut Opt[mut Person] moBob->
  mutBob=Persons#("Bob")
  mut Opt[mut Person] moBob=Opt[mut Person]{
    .map(_) -> this,
    .flatMap(_) -> this,
    .match(m) -> m.some(mutBob)
    }
  moBob
imoBob=Code.moBob
imBob.match{
   .some(mutBob)->mutBob.name("Robert")
   .none->Void
   }



-------------------------
Alternative that is not that good
Null[T]:Opt[T]{//note, this is hiding the 'mut Option[..]' of above
  .map(_) -> this,
  .flatMap(_) -> this,
  .match(m) -> m.none
  }

---

mut Acc acc = Accs#(0)
imm Opt[imm Num] opN=Opt#(5)
opN2=opN.map{n->n*2}
opN2=opN.map{n->acc++}


mut Opt[mut Acc] opA=Opt#(Accs#(0))

AsRead#(opA).map{a->a} :readOnly Option[mut Acc]
opA.rMap{a->a} :mut Option[mut Acc]
