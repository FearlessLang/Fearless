package base

ReturnStmt[R:imm]:{ #: R }
Condition:{ #: Bool }
VarContinuation[X:imm,R:imm]:{ #(x: X, self: Block[R]): R }
ControlFlow: {
  .continue: ControlFlow[Void] -> {m -> m.continue},
  .break: ControlFlow[Void] -> {m -> m.break},
  .continueWith[T:imm]: ControlFlow[T] -> {m -> m.continue},
  .breakWith[T:imm]: ControlFlow[T] -> {m -> m.break},
  .return[T:imm](returnValue: T): ControlFlow[T] -> {m -> m.return(returnValue)},
  }
ControlFlow[T:imm]: {
  .match[R:imm](m: ControlFlowMatch[T,R]): R,
  }
ControlFlowMatch[T:imm,R:imm]: {
  .continue: R,
  .break: R,
  .return(returnValue: T): R,
  }
LoopBody[R:imm]: ReturnStmt[ControlFlow[R]]

Block: Sealed{
  #[R:imm]: Block[R] -> {},
  }
Block[R:imm]: Sealed{
  .return(a: ReturnStmt[R]): R -> a#,
  .do(r: ReturnStmt[Void]): Block[R] -> this._do(r#),
    ._do(v: Void): Block[R] -> this,
  .assert(p: Condition): Block[R] -> Assert!(p#, AssertCont[Block[R]]{this}),
  .assert(p: Condition, failMsg: Str): Block[R] ->
    Assert!(p#, failMsg, AssertCont[Block[R]]{this}),
  .var[X:imm](x: ReturnStmt[X], cont: VarContinuation[X, R]): R -> cont#(x#, this),
  .if(p: Condition): BlockIf[R] -> p# ? { 'cond
    .then -> { 't
      .return(a) -> _DecidedBlock#(a#),
      .error(info) -> t.error(info),
      .do(r) -> t._do[](r#),
        ._do(v: Void): Block[R] -> this,
      },
    .else -> { 'f
      .return(_) -> this,
      .do(_) -> this,
      .error(_) -> this,
      },
    },
  }
BlockIf[R:imm]:{
  .return(a: ReturnStmt[R]): Block[R],
  .do(r: ReturnStmt[Void]): Block[R],
  .error(info: ReturnStmt[Info]): Block[R],
  }
_DecidedBlock:{
  #[R:imm](res: R): mut Block[R] -> { 'self
    .return(_) -> res,
    .do(_) -> self,
    .var(_, _) -> res,
    }
  }