package base

Main:{ #(args: LList[Str]): Str }
Sealed:{}
Void:{}

Abort:{ ![R]: R -> this! } // can be optimised to just terminate (goes stuck)

Let:{ #[V,R](l: Let[V, R]): R -> l.in(l.var) }
Let[V,R]:{ .var: V, .in(v: V): R }

F[R]:{ #: R }
F[A,R]:{ #(a: A): R }
F[A,B,R]:{ #(a: A, b: B): R }
F[A,B,C,R]:{ #(a: A, b: B, c: C): R }
