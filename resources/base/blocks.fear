package base

ReturnStmt[R]: {mut #: R}
Condition: ReturnStmt[Bool]
LoopBody[R]: ReturnStmt[mut ControlFlow[R]]
Continuation[T,C,R]: {mut #(x: T, self: C): R}
ControlFlow: {
  .continue: mut ControlFlow[Void] -> mut ControlFlowContinue: ControlFlow[Void]{m -> m.continue},
  .break: mut ControlFlow[Void] -> mut ControlFlowBreak: ControlFlow[Void]{m -> m.break},
  .continueWith[T]: mut ControlFlow[T] ->  mut ControlFlowContinue[T]: ControlFlow[T]{m -> m.continue},
  .breakWith[T]: mut ControlFlow[T] -> mut ControlFlowBreak[T]: ControlFlow[T]{m -> m.break},
  .return[T](returnValue: T): mut ControlFlow[T] -> mut ControlFlowReturn[T]: ControlFlow[T]{
    .match(m) -> m.return(returnValue),
    mut .value: T -> returnValue,
    },
  }
ControlFlow[T]: {
  mut .match[R](m: mut ControlFlowMatch[T,R]): R,
  }
ControlFlowMatch[T,R]: {
  mut .continue: R,
  mut .break: R,
  mut .return(returnValue: T): R,
  }

Block: Sealed{
  #[R]: mut Block[R] -> {},
  #[X:read,mut,imm,iso](x: X): Void -> this#(x, Void),
  #[X:read,mut,imm,iso, R:read,mut,imm,iso](_: X, res: R): R -> res,
  #[X1:read,mut,imm,iso, X2:read,mut,imm,iso, R:read,mut,imm,iso](_: X1, _: X2, res: R): R -> res,
  #[X1:read,mut,imm,iso, X2:read,mut,imm,iso, X3:read,mut,imm,iso, R:read,mut,imm,iso](_: X1, _: X2, _: X3, res: R): R -> res,
  #[X1:read,mut,imm,iso, X2:read,mut,imm,iso, X3:read,mut,imm,iso, X4:read,mut,imm,iso, R:read,mut,imm,iso](_: X1, _: X2, _: X3, _: X4, res: R): R -> res,
  }
Block[R]: Sealed{
  mut .done: Void -> {},
  mut .return(a: mut ReturnStmt[R]): R -> a#,
  mut .do(r: mut ReturnStmt[Void]): mut Block[R] -> this._do(r#),
    mut ._do(v: Void): mut Block[R] -> this,
  mut .assert(p: mut Condition): mut Block[R] -> Assert!(p#, mut AssertCont[mut Block[R]]{this}),
  mut .assert(p: mut Condition, failMsg: Str): mut Block[R] ->
    Assert!(p#, failMsg, mut AssertCont[mut Block[R]]{this}),
  mut .let[X](x: mut ReturnStmt[X], cont: mut Continuation[X, mut Block[R], R]): R -> cont#(x#, this),
  mut .letIso[X:iso](x: X, cont: mut Continuation[mut X, mut Block[R], R]): R -> cont#(x, this),
//  mut .ref[X:imm,mut](x: mut ReturnStmt[X], cont: mut VarContinuation[mut Ref[X], R]): R -> cont#(Ref#(x#), this),
//  mut .isoPod[X:iso](x: mut ReturnStmt[X], cont: mut VarContinuation[mut IsoPod[X], R]): R -> cont#(IsoPod#(x#), this),
  mut .if(p: mut Condition): mut BlockIf[R] -> p# ? { 'cond
    .then -> { 't
      .return(a) -> _DecidedBlock#(a#),
      .error(info) -> Error!(info#),
      .do(r) -> t._do[](r#),
        mut ._do(v: Void): mut Block[R] -> this,
      },
    .else -> { 'f
      .return(_) -> this,
      .do(_) -> this,
      .error(_) -> this,
      },
    },
  mut .loop(body: mut LoopBody[R]): mut Block[R] -> body#.match{
    .continue -> this.loop(body),
    .break -> this,
    .return(rv) -> _DecidedBlock#rv,
    },
  }
BlockIf[R]:{
  mut .return(a: mut ReturnStmt[R]): mut Block[R],
  mut .do(r: mut ReturnStmt[Void]): mut Block[R],
  mut .error(info: mut ReturnStmt[Info]): mut Block[R],
  }
_DecidedBlock:{
  #[R](res: R): mut Block[R] -> { 'self
    .return(_) -> res,
    .do(_) -> self,
    .let(_, _) -> res,
    }
  }
