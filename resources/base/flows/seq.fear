package base.flows

_SeqFlow: {
  .fromOp[E](source: mut FlowOp[E]): mut Flow[E] -> {'self
    // non-terminals
    .filter(p) -> this.fromOp(_Filter#[E](source, p)),
    mut .map[R](f: read F[E, R]): mut Flow[R] -> Todo!,

    // terminals
    mut .findMap[R](f: read F[E, mut Opt[R]]): mut Opt[R] -> source
      .forEachRemaining[mut Opt[R]]{e -> Let#{
        .var -> f#e,
        .in(res) -> res.match{.some(_) -> ControlFlow.return res, .empty -> ControlFlow.continue},
        }}
      .match{.continue -> {}, .break -> {}, .return(x) -> x},
    .find(p) -> self.findMap{e -> p#e ? {.then -> Opt#e, .else -> {}}},
    .anyMatch(p) -> self
      .findMap{e -> p#e ? {.then -> Opt#True, .else -> {}}}
      .match{.some(x) -> x, .empty -> False},
    },

  #[E](e: E): mut Flow[E] -> Block#
    .var[mut Ref[mut Opt[E]]] seq = { Ref#(Opt#e) }
    .var[mut FlowOp[E]] source = {{ 'self
      mut .step[R](sink: mut _Sink[E,R]): mut ControlFlow[R] -> seq.swap(mut Opt[E]).match{
        .some(x) -> sink#x,
        .empty -> ControlFlow.break[R],
        },
      .forEachRemaining(sink) -> self.step(sink),
      }}
    .return {this.fromOp(source)},
  }
