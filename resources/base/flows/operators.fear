package base.flows

// I could have .step with a read sink (so we know that sink operation can be parallelised) _and_ a .step with a mut sink
// which must be sequential. However, this adds implementation burden for people making flowable data structures and introduces
// new sources of runtime exceptions (i.e. accidentially calling the non .seq and it throwing because it would have to be
// unimplemented). Because _Sink/2 is a private trait, we can just manually make sure that a _Sink that would be unsafe
// to parallelise never runs in parallel. This should be easy because basically all parallel implementations of _Sink
// will be Magic!.

FlowOp[E]: {
  mut .step[S](sink: mut _Sink[S,E]): Void,
  mut .forRemaining[S](sink: mut _Sink[S,E]): Void -> this.step(sink).match{
    .continue -> this.forRemaining(sink),
    .return(x) -> ControlFlow.return(x),
    .break -> ControlFlow.break[R],
    },
  mut .isFinite: Bool -> True,
  }

_Sink[T]: _Sink[Void, T]{
  mut #(x: T): Void,
  #(state, x) -> this#x,
  }
_Sink[S,T]: {
  mut  #(state: S, x: T): Void,
  mut .stop: Void,
  mut .start(state: iso S): Void,
  }

_Filter: {
  #[E](upstream: mut FlowOp[E], predicate: read F[E, Bool]): mut FlowOp[E] -> {sink ->
    upstream.step{e -> predicate#e ? {.then -> sink#e, .else -> ControlFlow.continue}}},
  }
_Map: {
  #[E,R](upstream: mut FlowOp[E], f: read F[E, R]): mut FlowOp[R] -> {sink ->
    upstream.step{e -> sink#(f#e)}},
  }
