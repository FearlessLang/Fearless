package base.flows

FlowOp[E]: {
  mut .step[R](sink: read _Sink[E,R]): mut ControlFlow[R],
  mut .stepSeq[R](sink: mut _Sink[E,R]): mut ControlFlow[R] -> this.step(sink),
  mut .forRemaining[R](sink: read _Sink[E,R]): mut ControlFlow[R] -> this.step(sink).match{
    .continue -> this.forRemaining(sink),
    .return(x) -> ControlFlow.return(x),
    .break -> ControlFlow.break[R],
    },
  mut .isFinite: Bool -> True,
  }

ControlFlow: {
  .continue[T]: mut ControlFlow[T] -> {m -> m.continue},
  .continue[T](x: T): mut ControlFlow[T] -> {m -> m.continue(x)},
  .return[T](x: T): mut ControlFlow[T] -> {m -> m.return(x)},
  .break[T]: mut ControlFlow[T] -> {m -> m.break},
  }
ControlFlow[T]: {
  mut .match[R](m: mut ControlFlowMatcher[T, R]): R,
  mut .then(f: mut ControlFlowCont[T]): mut ControlFlow[T] -> this.match{
    .continue -> f#,
    .break -> this,
    .return(_) -> this,
    },
  }
ControlFlowMatcher[T, R]: {
  mut .continue: R,
  mut .continue(x: T): R -> this.continue,
  mut .break: R,
  mut .return(x: T): R,
  }
ControlFlowCont[T]: { mut #: mut ControlFlow[T] }

_Sink[T,R]: {
  read #(x: T): mut ControlFlow[R],
//  mut  #(x: T): mut ControlFlow[R],
  }

_Filter: {
  #[E](upstream: mut FlowOp[E], predicate: read F[E, Bool]): mut FlowOp[E] -> {
     mut .step[R](sink: read _Sink[E,R]): mut ControlFlow[R] ->
      upstream.step[R]{e -> predicate#e ? {.then -> sink#e, .else -> ControlFlow.continue[R]}},
    }
  }
_Map: {
  #[E,R](upstream: mut FlowOp[E], f: read F[E, R]): mut FlowOp[R] -> {
     mut .step[RR](sink: read _Sink[R,RR]): mut ControlFlow[RR] ->
       upstream.step[RR]{e -> sink#(f#e)},
    }
  }
