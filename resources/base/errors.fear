package base

Error:{
  ![R:read,mut,imm,iso,lent,readOnly](info: Info): R -> Magic!,
  .str[R:read,mut,imm,iso,lent,readOnly](s: Str): R -> this!{
    .str -> s,
    .list -> List#,
    .map -> EmptyMap[Str, Info]
    }
  }

Todo:{
  ![R:read,mut,imm,iso,lent,readOnly]: R -> Error.str[R] "TODO: Implement this code",
  ![R:read,mut,imm,iso,lent,readOnly](msg: Str): R -> Error.str[R]("TODO: "+msg),
}

/// Strong exception safety is upheld:
/// The operation has either completed successfully or thrown an exception,
// leaving the program state exactly as it was before the operation started.
Try:{
  #[R](try: read Try[R]): mut Res[R] -> Magic!,
  }

Try[R]:{ read #: R, }

Info:Sealed{
  .str: Str,
  .map: Map[Str, Info],
  .list: List[Info],
  }
FInfo: {
  .str(str: Str): Info -> {
    .str -> str,
    .list -> List#,
    .map -> EmptyMap[Str, Info],
    },
  .list(list: List[Info]): Info -> {
    .str -> "",
    .list -> list,
    .map -> EmptyMap[Str, Info],
    },
  .map(map: Map[Str, Info]): Info -> {
    .str -> "",
    .list -> List#,
    .map -> map,
    },
  }
