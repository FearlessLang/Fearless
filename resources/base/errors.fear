package base

Error:{
  ![R](info: Info): mdf R -> Magic!,
  .str[R](s: Str): mdf R -> this!{
    .str -> s,
    .list -> List#,
    .map -> EmptyMap[Str, Info]
    }
  }

/// Strong exception safety is upheld:
/// The operation has either completed successfully or thrown an exception,
// leaving the program state exactly as it was before the operation started.
Try:{
  #[R](try: read Try[mdf R], catch: mut Catch[mdf R]): mdf R -> Magic!,
  }

Try[R]:{ read #: mdf R, }
Catch[R]:{ mut #(info: Info): mdf R }

Info:Sealed{
  .str: Str,
  .map: Map[Str, Info],
  .list: List[Info],
  }
