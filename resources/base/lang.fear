package base
alias base.caps.System as System,

Main[R]:{ #(args: LList[Str], s: lent System[R]): mdf R }
NoMutHyg[X]:{}
Sealed:{}
Void:{}

Loop:{!: Void->this! }
Debug:Sealed{ #[T](x: T): T -> x } // TODO: magic
HasIdentity:{ mut .idEq(other: read HasIdentity): Bool -> this.idEq(other) } // TODO: magic

Let:{ #[mdf V, mdf R](l: mut Let[mdf V, mdf R]): mdf R -> l.in(l.var) }
Let[V,R]:NoMutHyg[mdf V],NoMutHyg[mdf R]{ mut .var: mdf V, mut .in(v: mdf V): mdf R }

//LetMut:{ #[V,R](l:mut LetMut[mdf V, mdf R]): mdf R -> l.in(l.var) }
//LetMut[V,R]:{ mut .var: mdf V, mut .in(v: mdf V): mdf R }

F[R]:{ #: R }
F[A,R]:{ #(a: A): R }
F[A,B,R]:{ #(a: A, b: B): R }
F[A,B,C,R]:{ #(a: A, b: B, c: C): R }

Box:{ #[R](r: mdf R): mut Box[mdf R] -> { r } }
Box[R]:NoMutHyg[mdf R]{ read #: recMdf R }
