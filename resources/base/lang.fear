package base
alias base.caps.System as System,

Main:{ #(args: LList[Str], s: lent System[Void]): Void }
NoMutHyg[X]:{}
Sealed:{}
Void:{}

Abort:{ ![R]: mdf R -> this! } // can be optimised to just terminate (goes stuck)
Debug:Sealed{ #[T](x: T): T -> x } // TODO: magic
HasIdentity:{ mut .idEq(other: read HasIdentity): Bool -> this.idEq(other) } // TODO: magic

Let:{
  #[mdf V, mdf R](l: mut Let[mdf V, mdf R]): mdf R -> l.in(l.var),
  .hyg[mdf V, mdf R](l: lent LetHyg[mdf V, mdf R]): mdf R -> l.in(l.var),
  }
Let[V,R]:NoMutHyg[mdf V],NoMutHyg[mdf R]{ mut .var: mdf V, mut .in(v: mdf V): mdf R }
LetHyg[V,R]:{ lent .var: mdf V, lent .in(v: mdf V): mdf R }
LetIso[V,R]:{ lent .var: iso V, lent .in(v: mdf V): mdf R }

//LetMut:{ #[V,R](l:mut LetMut[mdf V, mdf R]): mdf R -> l.in(l.var) }
//LetMut[V,R]:{ mut .var: mdf V, mut .in(v: mdf V): mdf R }

F[R]:{ #: mdf R }
F[A,R]:{ #(a: mdf A): mdf R }
F[A,B,R]:{ #(a: mdf A, b: mdf B): mdf R }
F[A,B,C,R]:{ #(a: mdf A, b: mdf B, c: mdf C): mdf R }

Yeet:{
  #[X](x: mdf X): Void -> this.with(x, Void),
  .with[X,R](_: mdf X, res: mdf R): mdf R -> res,
  }

Box:{ #[R](r: mdf R): mut Box[mdf R] -> { r } }
Box[R]:NoMutHyg[mdf R]{ read #: recMdf R }
