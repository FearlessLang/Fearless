package base.test

ResultPrinters: F[mut IO, mut ResultPrinter]{io -> mut ResultPrinter: ResultReporter{#(results) -> Block#
  .var[Str] resultsMsg = {results.flow.map{suite -> _TextUtils.suite(suite, 1)}#(Flow.str "\n\n")}
  .do {io.printlnErr("# Test Results\n" + resultsMsg)}
  .return {Void}
  }}

_TextUtils: {
  .results(results: read List[TestResult]): mut Flow[Str] -> results.flow.map{result -> result.title},
  .suite(suite: read TestResults, depth: Int): Str ->
    this.heading(suite.suiteTitle, depth)
    + "\n"
    + (this.results(suite.results)#(Flow.str "\n\n"))
    + (suite.nestedResults.isEmpty ?[Str] {.then -> "", .else -> "\n\n"})
    + (suite.nestedResults.flow.map{nested -> this.suite(nested, depth + 1)}#(Flow.str "\n")),

  .heading(title: Str, depth: Int): Str -> Block#
    .if {depth > 5} .return {"**"+title+"**  "}
    .return {Flow.range(0, depth + 1).map[Str]{_ -> "#"}#(Flow.str "") + " " + title},
  }
