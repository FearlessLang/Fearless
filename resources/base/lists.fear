package base

// Cons#(1, Cons#(2, Cons#(4, {})))
LList:{
  #[E](h: E): LList[E] -> { .match(m) -> m.elem(h, {}) },
  .cons[E](h: E, t: LList[E]): LList[E] -> { .match(m) -> m.elem(h, t) },
  }
LList[E]:Sealed{
  .match[R](m: mut LListMatch[E, mdf R]): mdf R -> m.empty,
  .isEmpty: Bool -> this.match{ .empty -> True, .elem(_,_) -> False },
  .len: UInt -> this.match{ .empty -> 0u, .elem(_,t) -> t.len + 1u, },
  ++(l1: LList[E]): LList[E] -> this.match{
    .empty -> l1,
    .elem(h, t) -> LList.cons(h, t ++ l1)
    },
  +(e: E): LList[E] -> this ++ (LList#e),
  .get(i: UInt): iso Opt[E] -> this.match{
    .empty -> {},
    .elem(h, t) -> (i == 0u) ? { .then -> Opt#h, .else -> t.get(i - 1u) }
    },
  .head: iso Opt[E] -> this.match{
    .empty -> {},
    .elem(h,_) -> Opt#h,
    },
  .tail: LList[E] -> this.match{
    .empty -> {},
    .elem(_,t) -> t,
    },
  .iter: mut Iter[E] -> Do#
    .var[mut Ref[LList[E]]] cursor = { Ref#this }
    .return{{ .next -> (cursor.swap(cursor*.tail)).head }},
  }
LListMatch[E,R]:{ mut .elem(head: E, tail: LList[E]): mdf R, mut .empty: mdf R }

LListMut:{
  #[E](head: mdf E): mut LListMut[mdf E] -> this.cons(head, {}),
  .cons[E](head: mdf E, tail: mut LListMut[mdf E]): mut LListMut[mdf E] -> {
    .match(m) -> m.elem(head, tail),
    .head -> Opt#[recMdf E](head),
    .headRaw -> Opt#[mdf E](head),
    .tail -> tail,
    .get(i) -> (i == 0u).ifHyg{ .then -> Opt#head, .else -> tail.get(i - 1u) },
    },
  }
LListMut[E]:Sealed,NoMutHyg[mdf E]{
  read .match[R](m: mut LListMutMatch[recMdf E, mdf E, mdf R]): mdf R -> m.empty,
  read .head: mut Opt[recMdf E] -> {},
  read .tail: recMdf LListMut[mdf E] -> {},
  read .isEmpty: Bool -> this.match{ .empty -> True, .elem(_,_) -> False },
  read .len: UInt -> this.match{ .empty -> 0u, .elem(_,t) -> t.len + 1u, },
  read .look(i: UInt): lent Opt[read E] -> this.match{
    .empty -> {},
    .elem(h,t) -> (i == 0u).ifHyg{ .then -> Opt#h, .else -> t.look(i - 1u) }
    },
  lent .get(i: UInt): mut Opt[mdf E] -> {},
  .getImm(i: UInt): iso Opt[E] -> (i == 0u).ifHyg{ .then -> this.head, .else -> this.tail.getImm(i - 1u) },
  read .iter: mut Iter[read E] -> Let.hyg{
    .var -> Ref#this,
    .in(cursor) -> { .next -> (cursor.swap(cursor*.tail)).head }
    },
  mut .iterMut: mut Iter[mdf E] -> Let#{
    .var -> Ref#[lent LListMut[mdf E]]this,
    .in(cursor) -> { .next -> (cursor.swap(cursor*.tail)).head }
    },

  mut .headRaw: mut Opt[mdf E] -> {},
  mut ++(l1: mut LListMut[mdf E]): mut LListMut[mdf E] -> this.headRaw.map{ h -> LListMut.cons(h, this.tail ++ l1) } | l1,
  mut +(e: mdf E): mut LListMut[mdf E] -> this ++ (LListMut#e),
  mut .toList: mut List[mdf E] -> List.fromLListMut(this),
  }
LListMutMatch[E,TE,R]:{
  mut .elem(head: mdf E, tail: read LListMut[mdf TE]): mdf R,
  mut .empty: mdf R,
  }
_LListMutGet[E]:ThenElse[mut Opt[mdf E]]{
  mut .head: mut Opt[mdf E],
  .then -> this.head,
  .else -> {}
  }

List:{
  #[E]: mut List[mdf E] -> this._new(Ref#mut _ListState[mdf E]),
  #[E](e: mdf E): mut List[mdf E] -> this.fromLListMut(LListMut#e),
  // TODO: this up to 10 or something
  #[E](e1: mdf E, e2: mdf E, e3: mdf E): mut List[mdf E] -> this.fromLListMut(LListMut.cons(e1, LListMut.cons(e2, LListMut#e3))),
  .fromLListMut[E](list: mut LListMut[mdf E]): mut List[mdf E] -> this._new(Ref#(_ListState#(list.len, list))),

  /// Note: This fearless implementation of a list may be replaced with a conventional expandable array list
  /// as magic for performance reasons.
  ._new[E](s: mut Ref[mut _ListState[mdf E]]): mut List[mdf E] -> { 'list
    .len -> s*.len,
    .isEmpty -> s*.inner.isEmpty,
    .look(i) -> s*.inner.look(i),
    .get(i) -> s*.inner.get(i),
    .getImm(i) -> s*.inner.getImm(i),
    .add(e) -> s := _ListState#(s*.len + 1u, s*.inner + e),
    .iter -> Let.hyg{
      .var -> Count.uint(0u),
      .in(cursor) -> { .next -> list.look(cursor++) }
      },
    .iterMut -> Let#{
      .var -> Count.uint(0u),
      .in(cursor) -> { .next -> list.get(cursor++) }
      },
    }}
List[E]:Sealed,NoMutHyg[mdf E]{
  read .len: UInt,
  read .isEmpty: Bool,
  read .look(i: UInt): lent Opt[read E],
  lent .get(i: UInt): mut Opt[mdf E],
  .getImm(i: UInt): iso Opt[E],
  mut .add(e: mdf E): Void,
  read .iter: lent Iter[read E],
  mut .iterMut: mut Iter[mdf E],
//  mut .addAll(other: mut List[mdf E]): Void,
  }
_ListState[E]:NoMutHyg[E]{
  read .len: UInt -> 0u,
  read .inner: recMdf LListMut[mdf E] -> {}
  }
_ListState:{
  #[E](len: UInt, inner: mut LListMut[mdf E]): mut _ListState[mdf E] -> {
    .len -> len,
    .inner -> inner
    }
  }
