package base

Bool:Sealed,Stringable{
  .and(b: Bool): Bool,
  &&(b: Bool): Bool -> this.and(b),
  .or(b: Bool): Bool,
  ||(b: Bool): Bool -> this.or(b),
  .not: Bool,
  .if[R](f: mut ThenElse[mdf R]): mdf R,
  ?[R](f: mut ThenElse[mdf R]): mdf R -> this.if(f),
  .ifHyg[R](f: lent ThenElseHyg[mdf R]): mdf R,
  }
True:Bool{
  .and(b) -> b,
  .or(b) -> this,
  .not -> False,
  .if(f) -> f.then(),
  .ifHyg(f) -> f.then(),
  .str -> "True"
  }
False:Bool{
  .and(b) -> this,
  .or(b) -> b,
  .not -> True,
  .if(f) -> f.else(),
  .ifHyg(f) -> f.else(),
  .str -> "False"
  }
ThenElse[R]:NoMutHyg[R]{ mut .then: mdf R, mut .else: mdf R, }
ThenElseHyg[R]:NoMutHyg[R]{ lent .then: mdf R, lent .else: mdf R, }

