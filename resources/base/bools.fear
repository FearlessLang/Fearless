package base

Bool:Sealed,Stringable{
  .and(b: Bool): Bool,
  &&(b: Bool): Bool -> this.and(b),
  .or(b: Bool): Bool,
  ||(b: Bool): Bool -> this.or(b),
  .not: Bool,
  ?[R](f: mut ThenElse[mdf R]): mdf R, // ?  because `bool ? { .then->aa, .else->bb }` is kinda like a ternary
  .hygIf[R](f: read ThenElseHyg[mdf R]): mdf R, // ?  because `bool ? { .then->aa, .else->bb }` is kinda like a ternary
  }
True:Bool{ .and(b) -> b, .or(b) -> this, .not -> False, ?(f) -> f.then(), .hygIf(f) -> f.then(), .str -> "True" }
False:Bool{ .and(b) -> this, .or(b) -> b, .not -> True, ?(f) -> f.else(), .hygIf(f) -> f.else(), .str -> "False" }
ThenElse[R]:NoMutHyg[R]{ mut .then: mdf R, mut .else: mdf R, }
ThenElseHyg[R]:NoMutHyg[R]{ read .then: mdf R, read .else: mdf R, }

