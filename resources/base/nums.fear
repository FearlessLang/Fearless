package base

Int:Sealed,_MathOps[Int],_IntOps[Int]{
  .uint: UInt,
  .float: Float,
  // not Stringable due to limitations of the Java codegen target
  .str: Str,
  }
UInt:Sealed,_MathOps[UInt],_IntOps[UInt]{
  .int: Int,
  .float: Float,
  // not Stringable due to limitations of the Java codegen target
  .str: Str,
  }
Float:Sealed,_MathOps[Float]{
  .int: Int,
  .uint: UInt,
  .round: Int,
  .ceil: Int,
  .floor: Int,
  **(n: Float): Float, // pow
  .isNaN: Bool,
  .isInfinite: Bool,
  .isPosInfinity: Bool,
  .isNegInfinity: Bool,
  // not Stringable due to limitations of the Java codegen target
  .str: Str,
  }

_MathOps[T]:Sealed{
  readOnly .toImm: T,
  +(n: T): T,
  -(n: T): T,
  *(n: T): T,
  /(n: T): T,
  %(n: T): T,
  .abs: T,

  // Comparisons
  >(n: T): Bool,
  <(n: T): Bool,
  >=(n: T): Bool,
  <=(n: T): Bool,
  ==(n: T): Bool,
  }
_IntOps[T]:Sealed{
  // bitwise
  >>(n: T): T,
  <<(n: T): T,
  ^(n: T): T,
  &(n: T): T,
  |(n: T): T,

  **(n: UInt): T, // pow
  }

// Fake concrete type for all numbers. The real implementation is generated at code-gen.
_IntInstance:Int{
  .uint -> Magic!,
  .float -> Magic!,
  .str -> Magic!,
  +(n) -> Magic!,
  -(n) -> Magic!,
  *(n) -> Magic!,
  /(n) -> Magic!,
  %(n) -> Magic!,
  **(n) -> Magic!,
  .abs -> Magic!,
  .toImm -> Magic!,

  // bitwise
  >>(n) -> Magic!,
  <<(n) -> Magic!,
  ^(n) -> Magic!,
  &(n) -> Magic!,
  |(n) -> Magic!,

  // Comparisons
  >n -> Magic!,
  <n -> Magic!,
  >=n -> Magic!,
  <=n -> Magic!,
  ==n -> Magic!,
  }
_UIntInstance:UInt{
  .int -> Magic!,
  .float -> Magic!,
  .str -> Magic!,
  +(n) -> Magic!,
  -(n) -> Magic!,
  *(n) -> Magic!,
  /(n) -> Magic!,
  %(n) -> Magic!,
  **(n) -> Magic!,
  .abs -> Magic!,
  .toImm -> Magic!,

  // bitwise
  >>(n) -> Magic!,
  <<(n) -> Magic!,
  ^(n) -> Magic!,
  &(n) -> Magic!,
  |(n) -> Magic!,

  // Comparisons
  >n -> Magic!,
  <n -> Magic!,
  >=n -> Magic!,
  <=n -> Magic!,
  ==n -> Magic!,
  }
_FloatInstance:Float{
  .int -> Magic!,
  .uint -> Magic!,
  .str -> Magic!,
  .round -> Magic!,
  .ceil -> Magic!,
  .floor -> Magic!,
  .isNaN -> Magic!,
  .isInfinite -> Magic!,
  .isPosInfinity -> Magic!,
  .isNegInfinity -> Magic!,
  +(n) -> Magic!,
  -(n) -> Magic!,
  *(n) -> Magic!,
  /(n) -> Magic!,
  %(n) -> Magic!,
  **(n) -> Magic!,
  .abs -> Magic!,
  .toImm -> Magic!,
  // Comparisons
  >n -> Magic!,
  <n -> Magic!,
  >=n -> Magic!,
  <=n -> Magic!,
  ==n -> Magic!,
  }
