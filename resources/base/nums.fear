package base

Int:Sealed,MathOps[Int],IntOps[Int]{
  read .uint: UInt,
  read .float: Float,
  // not Stringable due to limitations of the Java codegen target
  read .str: Str,
  }
UInt:Sealed,MathOps[UInt],IntOps[UInt]{
  read .int: Int,
  read .float: Float,
  // not Stringable due to limitations of the Java codegen target
  read .str: Str,
  }
Float:Sealed,MathOps[Float]{
  read .int: Int,
  read .uint: UInt,
  read .round: Int,
  read .ceil: Int,
  read .floor: Int,
  read **(n: read Float): Float, // pow
  read .isNaN: Bool,
  read .isInfinite: Bool,
  read .isPosInfinity: Bool,
  read .isNegInfinity: Bool,
  // not Stringable due to limitations of the Java codegen target
  read .str: Str,
  }

MathOps[T]:Sealed{
  read +(n: read T): T,
  read -(n: read T): T,
  read *(n: read T): T,
  read /(n: read T): T,
  read %(n: read T): T,
  read .abs: T,

  // Comparisons
  read >(n: read T): Bool,
  read <(n: read T): Bool,
  read >=(n: read T): Bool,
  read <=(n: read T): Bool,
  read ==(n: read T): Bool,
  }
IntOps[T]:Sealed{
  // bitwise
  read >>(n: read T): T,
  read <<(n: read T): T,
  read ^(n: read T): T,
  read &(n: read T): T,
  read |(n: read T): T,

  read **(n: read UInt): T, // pow
  }

// Fake concrete type for all numbers. The real implementation is generated at code-gen.
_IntInstance:Int{
  .uint -> Abort!,
  .float -> Abort!,
  .str -> Abort!,
  +(n) -> Abort!,
  -(n) -> Abort!,
  *(n) -> Abort!,
  /(n) -> Abort!,
  %(n) -> Abort!,
  **(n) -> Abort!,
  .abs -> Abort!,

  // bitwise
  >>(n) -> Abort!,
  <<(n) -> Abort!,
  ^(n) -> Abort!,
  &(n) -> Abort!,
  |(n) -> Abort!,

  // Comparisons
  >n -> Abort!,
  <n -> Abort!,
  >=n -> Abort!,
  <=n -> Abort!,
  ==n -> Abort!,
  }
_UIntInstance:UInt{
  .int -> Abort!,
  .float -> Abort!,
  .str -> Abort!,
  +(n) -> Abort!,
  -(n) -> Abort!,
  *(n) -> Abort!,
  /(n) -> Abort!,
  %(n) -> Abort!,
  **(n) -> Abort!,
  .abs -> Abort!,

  // bitwise
  >>(n) -> Abort!,
  <<(n) -> Abort!,
  ^(n) -> Abort!,
  &(n) -> Abort!,
  |(n) -> Abort!,

  // Comparisons
  >n -> Abort!,
  <n -> Abort!,
  >=n -> Abort!,
  <=n -> Abort!,
  ==n -> Abort!,
  }
_FloatInstance:Float{
  .int -> Abort!,
  .uint -> Abort!,
  .str -> Abort!,
  .round -> Abort!,
  .ceil -> Abort!,
  .floor -> Abort!,
  .isNaN -> Abort!,
  .isInfinite -> Abort!,
  .isPosInfinity -> Abort!,
  .isNegInfinity -> Abort!,
  +(n) -> Abort!,
  -(n) -> Abort!,
  *(n) -> Abort!,
  /(n) -> Abort!,
  %(n) -> Abort!,
  **(n) -> Abort!,
  .abs -> Abort!,
  // Comparisons
  >n -> Abort!,
  <n -> Abort!,
  >=n -> Abort!,
  <=n -> Abort!,
  ==n -> Abort!,
  }
