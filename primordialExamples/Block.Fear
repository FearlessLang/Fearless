Block
  .if {} .return {}
  .var {x=e} //sugar for .var(LX,Cont) Cont: Self,X->Block
  .if {} .do {}
  .if {} .error {} //unchecked exception
  .do {}
  .return {}

Block
  .if {} .return {}
  .var({e},{(x,_self)->_self
    .if {} .do {}
    .if {} .error {} //unchecked exception
    .do {}
    .return {}
    }

User:{
  num: Num -> Block
    .var({ 10 }, {(ten,b) -> b
      .if { 6 < ten } .do { Debug#"Hello" }
      .return ten
    }),
  hmm: Num -> Block
    .var({ 10 }, {(ten,b) -> Block // intentionally not using self to be evil
      .if { 6 < ten } .do { Debug#"Hello" }
      .return ten
    }),
  sugar: Num -> Block
    .var{ ten = 10 }
    .if { 6 < ten } .do { Debug#"Hello" }
    .return ten,
  loopTen: ? -> Block
    .var{ acc = Ref#0 }
    .loop{ Block
      .if { acc* == 10 } .return { ControlFlow.break }
      .do { acc := acc* + 1 }
      .return { {} } // continue
      }
    .return { acc* },
  loopTen2: ? -> Block
    .var{ acc = Ref#0 }
    .loop{ Block
      .if { acc* == 10 } .return { ControlFlow.return { acc* } }
      .do { acc := acc* + 1 }
      .return { {} } // continue
      }
  }

Do:{ mut #: Void }
ReturnStmt[R]{ mut #: mdf R }
Condition{ mut #: Bool }
Continuation[X,R]:{ mut #(x: mdf X, _self: mut Block[mdf R]): mdf R }
LoopBody[T]{ mut #: ControlFlow[mdf T] }
ControlFlow:{
  read .continue: mut ControlFlow[Void] -> {},
  read .break: mut ControlFlow[Void] -> { m -> m.break },
  read .return[T](rv: mdf T): mut ControlFlow[mdf T] -> { m -> m.return(rv) }
  }
ControlFlow[T]:Sealed{
  read .match[R](m: mut ControlFlowMatch[mdf R]): mdf R -> m.continue,
  }
ControlFlowMatch[T,R]:{
  mut .continue: R,
  mut .break: R,
  mut .return(rv: mdf T): R,
  }

Block[R]:{
  mut .return(a: mut ReturnStmt[mdf R]): mdf R -> a#
  mut .if(a: mut Condition): mut BlockIf[mdf R] -> a# ? {
    .then -> BlockIfTrue[mdf R]{ this },
    .else -> BlockIfFalse[mdf R]{ this },
    },
  mut .var[X](x: mut ReturnStmt[mdf X],
              cont: mut Continuation[mdf X,mdf R]): mdf R ->
    cont#(x#, this)
  
  mut .do(a: mut Do): mut Block[mdf R] -> this._do(a#)
  mut ._do(a: Void): mut Block[mdf R] -> this

  mut .loop(a: mut LoopBody[mdf R]): mut Block[mdf R] -> a.match{
    .continue -> this.loop(a),
    .break -> this,
    .return(rv) -> Block .return{ rv },
    }
  }
BlockIf[R]:{
  mdf .outer: mut Block[mdf R]
  mut .return(a:mut ReturnStmt[mdf R]): mut Block[mdf R]
  mut .error(a:mut ReturnStmt[Info]): mut Block[mdf R]
  mut .do(a:mut Do): mut Block[mdf R]
  }
BlockIfTrue[R]:BlockIf[mdf R]{
  .return(a) -> this._return(a#)
  mut ._return(x:mdf X) -> DecidedBlock[mdf R]{ x }
  .error(a) -> Error#(a#)
  .do(a) -> this._do(a#)
  mut ._do(v: Void): mut Block[mdf R] -> this.outer
  }
BlockIfFalse[R]:BlockIf[mdf R]{
  .return(a) -> this.outer
  .error(a) -> this.outer
  .do(a) -> this.outer
  }
DecidedBlock[R]:Block[mdf R]{
  mut .res: mdf R,
  .return(a) -> this.res,
  .var(_,_) -> this.res,
  .if(a) -> BlockIfFalse[R]{this},
  .do(a) -> this,
  }
