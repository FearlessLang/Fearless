// A fairly direct adaptation of ReactiveX in Fearless.
// Keeping things imm here to start off with. In the future it
// would be reasonable to want support for mut values, etc. in observables
// if we aren't parallelising (and support for capsule mutation would be ideal too)

Observable[T,E]:{
  .subscribe(sub: mut Observer[T, E]): mut Subscription,
  }
Observable:{
  #[T,E](impl: mut ObservableImpl[T, E]): mut Observable[T, E] -> {
    .subscribe(sub) -> impl(sub)
    }

Observer:{
  #[T,E]: capsule Observer[mdf T, mdf E] -> 
  }
Observer[T,E]:{
  ? .next(x: mdf T): Void,
  ? .error(err: mdf E): Void -> this.complete, // terminate by default
  ? .complete: Void -> this._isDone
  }
ObservableImpl[T,E]:{ #(sub: Observer[mdf T, mdf E]): Subscription }
Subscription:{ mut .unsubscribe: Void -> Void }

----------------------------
User:{
  myObs: Observable[Num, Void] -> ? Observable#{sub -> Block
      .do { sub.next(1) }
      .do { sub.next(2) }
      .do { sub.next(3) }
      .do { sub.complete }
      .return {{}}
    }
  addOne(source: Observable[Num, Void]): Observable[Num, Void] -> Observable#{sub ->
    source.subscribe{
      .next
      }
    },
  run: Void -> Block
    .return { Void }
}

// observable/sharedobservable
// capsule implementations?
// how to capture object caps... maybe a non-parallelisable constructor
// that takes a mut implementation?

/*
import './style.css';

import { of, map, Observable } from 'rxjs';

let finiteObs: Observable<number> = new Observable((sub) => {
  sub.next(1);
  sub.next(2);
  sub.next(3);
  sub.complete();
  sub.next(10);
  return () => {
    console.log('finite', 'tear down');
  };
});

let infiniteObs: Observable<number> = new Observable((sub) => {
  sub.next(1);
  sub.next(2);
  sub.next(3);
  sub.next(10);
  return () => {
    console.log('infinite', 'tear down');
  };
});

let subFinite = finiteObs.subscribe({
  next: (x) => console.log('finite', x),
  complete: () => console.log('finite', 'complete'),
});

let subInfinite = infiniteObs.subscribe({
  next: (x) => console.log('infinite', x),
  complete: () => console.log('infinite', 'complete'),
});
// sub.add();
subInfinite.unsubscribe();

let subLeak = infiniteObs.subscribe({
  next: (x) => console.log('leak', x),
  complete: () => console.log('leak', 'complete'),
});

// Open the console in the bottom right to see results.
*/
