package newlists
alias base.Opt as Opt, alias base.NoMutHyg as NoMutHyg, alias base.Sealed as Sealed,

LListMut:{
  #[E](head: mut E): mut LListMut[mut E] -> this.cons(head, {}),
  .cons[E](head: mut E, tail: mut LListMut[mdf E]): mut LListMut[mdf E] -> {
    .match(m) -> m.elem(head, tail),
//    .head -> Opt#head,
    },
  }
LListMut[E]:Sealed{
  mut .match[R](m: mut LListMutMatch[mdf E, mdf R]): mdf R -> m.empty,
  read .head: mut Opt[recMdf E] -> {},
  }
LListMutMatch[E,R]:{
  mut .elem(head: mut E, tail: mut LListMut[mdf E]): mdf R,
  mut .empty: mdf R,
  }

Usage:{
  .m1: mut LListMut[mut Foo] -> LListMut#(mut Foo),
  .m2: LListMut[mut Foo] -> LListMut#(iso Foo),
  .m2a: LListMut[Foo] -> this.m2,
  .m3: LListMut[mut Foo] -> LListMut.cons(mut Foo, this.m1),
  .m4: LListMut[Foo] -> this.m3,
  .m5: iso LListMut[mut Foo] -> this.m1,
  }
Foo:{}
No:Foo{}
