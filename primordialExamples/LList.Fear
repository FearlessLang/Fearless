//shallow imm linked lists
//map handles elements in order

// Cons#(1, Cons#(2, Cons#(4, {})))
Cons:{
  #[E](h: E, t: LList[mdf E]): mut LList[mdf E] -> {
    .match(m) -> m.elem(this,e)
    },
  }
//alias mut LListMatch[recMdf E,mdf R,recMdf LList[recMdf E]] as _LListMatch
LList[E]:NoMutHyg[E],Sealed,Iterable[recMdf E]{
  read .match[R](
    m: mut LListMatch[ recMdf E, mdf R, recMdf LList[recMdf E] ]
    ): mdf R -> m.empty,
  read .isEmpty: Bool -> this.match {
    .empty -> True,
    .elem(_,_) -> False
    },
  read .size: UNum -> this.match{
    .empty -> 0u,
    .elem(_,t) -> t.size+1u,
    },
  read ++(l1: recMdf LList[mdf E]): recMdf LList[mdf E] -> this.match{
    .empty -> l1,
    .elem(h, t) -> Cons#(h, t ++ l1)
    },
  read +(e: mdf E): recMdf LList[mdf E] -> this ++ Cons#(e, {}),
  read .get(i: UNum) : recMdf Opt[recMdf E] -> this.match{// or recMdf Opt[mdf E] depending on inference 
    .empty -> {},
    .elem(h, t) -> (i == 0) ? { .then -> Opt#h, .else -> t.get(i - 1u) }
    },
  read head: recMdf Opt[recMdf E] -> this.match{
    .empty -> {},
    .elem(h,_) -> Opt#h,
    },
  read tail: recMdf LList[mdf E] -> this.match{
    .empty -> {},
    .elem(_,t) -> t,
    },
  lent .iter -> Block
    .var[mut Ref[recMdf LList[recMdf E]]] cur={ Ref#this }
    .return{{ .next -> cur.swap(cur*.tail).head }},
  }
LListMatch[E,L,R]:{ mut .elem(head: mdf E, tail: mdf L): mdf R, mut .empty: mdf R }

ListState[E]:NoMutHyg[E],Sealed{
  read .size: UNum -> 0u,
  read .inner: recMdf LList[mdf E] -> {}
  }
ListState:{
  #[E](size: UNum, inner: mut LList[mdf E]): mut ListState[mdf E] -> {
    .size -> size,
    .inner -> inner
    }
  }
List[E]:NoMutHyg[mdf E],Sealed,Iterable[recMdf E]{
  read .size: UNum,
  read .isEmpty: Bool,
  read .get(i: UNum): recMdf Opt[recMdf E],
  mut .add(e: mdf E): Void,
  mut .addAll(l1: recMdf List[mdf E]): Void,
  }
List{
  #[E]: mut List[mdf E] -> this._genList[mdf E](Ref#{}),
  #[E](e: mdf E) -> this.fromLList(Cons#(e, {})),
  #[E](e1: mdf E, e2: mdf E) -> this.fromLList(Cons#(e1, Cons#(e2, {}))),
  #[E](e1: mdf E, e2: mdf E, e3: mdf E) -> this.fromLList(Cons#(e1, Cons#(e2, Cons#(e3, {})))),
  // and so on up to 10 or so (or magic it to create what's used like numbers)
  .fromLList[E](lList: mut LList[mdf E]): mut List[mdf E] -> this._genList[mdf E](Block
    .var size={ lList.size }
    .return{{ .size -> size, .inner -> inner }}
    ),
  ._genList[E](s: mut Ref[mut ListState[mdf E]]): mut List[mdf E] -> list={
    .size -> s*.size,
    .isEmpty -> s*.inner.isEmpty,
    .get(i) -> s*.inner.get(i),
    .iter -> iter={ // read .iter: lent Iter[mdf E]
      .next: list.get(iter.cur.swap(iter.cur* + 1u)),
      },
    .add(e) -> s := ListState#(s*.size + 1u, s*.inner + e),
    .addAll(l1) -> l1.iter.forEach{ e -> list.add(e) }
    }
  }

------------------
Person:{ .name: mut Ref[Str], .age: mut Count[UNum] }
PersonK:{
  #(name: Ref[Str], age: Count[UNum]): mut Person -> {
    .name -> name,
    .age -> age,
    }
  }
Course:{
  .students: mut List[mut Person],
  mut addStudent(s: mut Person): Void -> this.students + s,
  read classSize(): UNum -> this.students.size
  }
CourseK:{
  #: Course -> Let#{
    .var -> Ref[mut List[mut Person]]#List#,
    .in(students) -> { students }
    }
  }
Main { Block
  .var{course = CourseK#}
  .do{ course.addStudent(Ref#"Nick", Count#u(22u)) }
  .do{ course.students.get(0).do{ s -> s.age++ } }
  }
