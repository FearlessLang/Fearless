Sealed:{}

Stores[X]:{}

Convertible:{}

Void:Sealed{}

Loop:{!:Void->this!}

HasIdentity:{ mut identityEq(other : read HasIdentity):Bool }//magic

F[R]:{ #:R }
F[A,R]:{ #(a:A):R }
F[A,B,R]:{ #(a:A,b:B):R }
F[A,B,C,R]:{ #(a:A,b:B,c:C):R }

Let:{
  #[V,R](l:Let[V,R]):R -> l.in(l.var)
  }
Let[V,R]:{
  .var:V,
  .in(v:V):R
  }
// Let#{.var->5, .in(x)->x+1}//six