// use tmap in flows (or maybe to implement other flow methods like scan/etc)
Flow[T].tmap[S,RS,R](init: mut BoxIso[S], fn: TF[mdf T,S,RS,mdf R]): Flow[mdf R]->
  this.wrapR(init.look(fn,this.nextE))

  this.wrapR(fn#(this.nextE))


TF[T,S,RS,R]:{
  #(state: lent S, x: mdf T): mut TRes[RS,mdf R]
}
TRes[RS,R]:Sealed{ mut .nextState: iso RS, mut .next: mdf R }
TRes:{ #[RS,R](nextState: iso RS, next: mdf R): mut TRes[RS,R]->Block
  .var ns={BoxIso#[Rs](nextState)}
  .return TRes[Rs,R]{.nextState->ns.get,.next->next}
  }

TRes[RS,R]:Sealed{ mut .nextState: mut RS, mut .next: mdf R }
TRes:{ #[RS,R](nextState: iso RS, next: mdf R): mut TRes[RS,R]->{.nextState->nextState,.next->next}}


BoxIso[T]:{
  mut .swap(iso T):iso T
  mut .look[R](obs:F[mut T, R]):R->boring/magic
  mut .look[R](obs:F[mut T, B, R],b:B):R->boring/magic
  mut .get:iso T
  //NO  readOnly .readGet:readOnly T
  mut .set:iso T
  }
BoxIso:{ #[T](e:iso T):mut BoxIso[T]->magic }


Processor[Self]:{
  .accept(f:F[mut Self,I,R]):Void
  }

myFlow.tMap(Ref#(0),{ rn,x-> rn<-{curr+x}  }).to List

myFlow.tMap(Ref#(0),{ rn,x-> Block
  .var n={rn#}
  .do rn.set(n+x)
  .return n
  }).to List

myFlow.tMap(Ref#(0),{ n,rn,x-> Block //may be it can be more ergonomic to give you the unwrapped n
  .do nc<<n+x
  .return x
  }).to List