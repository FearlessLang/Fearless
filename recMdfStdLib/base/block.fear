package base

ReturnStmt[R]:{ mut #: mdf R }
Condition:{ mut #: Bool }
VarContinuation[X, R: imm,mut]:{ mut #(x: mdf X, self: mut Block[mdf R]): mdf R }
Do:{
  #[R: imm,mut]: mut Block[mdf R] -> {},
  }
Block[R: imm,mut]:{
  mut .return(a: mut ReturnStmt[mdf R]): mdf R -> a#,
  mut .do(r: mut ReturnStmt[Void]): mut Block[mdf R] -> this._do(r#),
    mut ._do(v: Void): mut Block[mdf R] -> this,
  mut .assert(p: mut Condition): mut Block[mdf R] -> mut Assert#(p#, mut AssertCont[mut Block[mdf R]]{this}),
  mut .assert(p: mut Condition, failMsg: Str): mut Block[mdf R] ->
    mut Assert#(p#, failMsg, mut AssertCont[mut Block[mdf R]]{this}),
  mut .var[X](x: mut ReturnStmt[mdf X], cont: mut VarContinuation[mdf X, mdf R]): mdf R -> cont#(x#, this),
  mut .ref[X:imm,mut](x: mut ReturnStmt[mdf X], cont: mut VarContinuation[mut Ref[mdf X], mdf R]): mdf R -> cont#(Ref#(x#), this),
//  mut .isoPod[X:iso](x: mut ReturnStmt[mdf X], cont: mut VarContinuation[mut IsoPod[mdf X], mdf R]): mdf R -> cont#(IsoPod#(x#), this),
  mut .if(p: mut Condition): mut BlockIf[mdf R] -> p# ? { 'cond
    .then -> { 't
      .return(a) -> _DecidedBlock#(a#),
      .do(r) -> t._do[](r#),
        mut ._do(v: Void): mut Block[mdf R] -> this,
      },
    .else -> { 'f
      .return(_) -> this,
      .do(_) -> this,
      },
    },
  }
BlockIf[R: imm,mut]:{
  mut .return(a: mut ReturnStmt[mdf R]): mut Block[mdf R],
  mut .do(r: mut ReturnStmt[Void]): mut Block[mdf R],
  }
_DecidedBlock:{
  #[R: imm,mut](res: mdf R): mut Block[mdf R] -> { 'self
    .return(_) -> res,
    .do(_) -> self,
    .var(_, _) -> res,
    }
  }

//Do:{
//  recMdf #[R]: recMdf Block[mdf R] -> {},
//  .hyg[R]: lent BlockHyg[mdf R] -> {},
//  }
//Block[R]:{
//  recMdf .return: Void -> {},
//  recMdf .return(a: mut ReturnStmt[mdf R]): mdf R -> a#,
//  recMdf .assert(cond: mut Condition, msg: Str): recMdf Block[recMdf R] -> Block#(Assert#(cond#, msg, {Void}), this),
//  mut .do(a: mut DoRunner): mut Block[mdf R] -> this._do(a#),
//    mut ._do(v: Void): mut Block[mdf R] -> this,
//  mut .var[X](x: mut ReturnStmt[mdf X], cont: mut Continuation[mdf X, mdf R]): mdf R -> cont#(x#, this),
//  mut .if(a: mut Condition): mut BlockIf[mdf R] -> a# ? {
//    .then -> mut BlockIfTrue[mdf R]{ ._outer -> this },
//    .else -> mut BlockIfFalse[mdf R]{ ._outer -> this }
//    },
//  mut .hyg: lent BlockHyg[mdf R] -> {},
//  }
//
//BlockIf[R]:{
//  mut ._outer: mut Block[mdf R],
//  mut .return(a: mut ReturnStmt[mdf R]): mut Block[mdf R],
//  mut .assert(cond: mut Condition, msg: Str): mut Block[mdf R],
//  mut .error(a: mut ReturnStmt[Void]): mut Block[mdf R], // todo: proper errors
//  mut .do(a: mut DoRunner): mut Block[mdf R],
//  mut .hyg: lent BlockIfHyg[mdf R],
//  }
//BlockIfTrue[R]:BlockIf[mdf R]{
//  .return(a) -> this._return(a#),
//    recMdf ._return(x: recMdf R): recMdf DecidedBlock[mdf R] -> { x },
//  .error(a) -> this.error(a),
//  .do(a) -> this._do(a#),
//    mut ._do(v: Void): mut Block[mdf R] -> this._outer,
//  .assert(cond, msg) -> Block#(Assert#(cond#, msg, {Void}), this._outer),
//  .hyg -> this._hyg(this._outer.hyg),
//    mut ._hyg(outer: lent BlockHyg[mdf R]): lent BlockIfHyg[mdf R] -> lent BlockIfTrueHyg[mdf R]{ ._outer -> outer }
//  }
//BlockIfFalse[R]:BlockIf[mdf R]{
//  .return(a) -> this._outer,
//  .error(a) -> this._outer,
//  .do(a) -> this._outer,
//  .assert(cond, msg) -> this._outer,
//  .hyg -> this._hyg(this._outer.hyg),
//    mut ._hyg(outer: lent BlockHyg[mdf R]): lent BlockIfHyg[mdf R] -> lent BlockIfFalseHyg[mdf R]{ ._outer -> outer }
//  }
//DecidedBlock[R]:Block[mdf R]{
//  recMdf ._res: recMdf R,
//  .return(a) -> this._res,
//  .do(a) -> this,
//  .assert(cond, msg) -> this,
//  .var(_,_) -> this._res,
//  .if(a) -> BlockIfFalse[mdf R]{ this },
//  .hyg -> this._hyg(this._res),
//    mut ._hyg(res: mdf R): lent DecidedBlockHyg[mdf R] -> { res },
//  }
//
//ReturnStmt[R]:{ mut #: mdf R }
//DoRunner:{ mut #: Void }
//Condition:{ mut #: Bool }
//Continuation[X,R]:{ mut #(x: mdf X, self: mut Block[mdf R]): mdf R }
//
//// hyg blocks
//BlockHyg[R]:{
//  lent .return(a: lent ReturnStmtHyg[mdf R]): mdf R -> a#,
//  lent .do(a: lent DoRunnerHyg): lent BlockHyg[mdf R] -> this._do(a#),
//    lent ._do(v: Void): lent BlockHyg[mdf R] -> {},
//  lent .assert(cond: lent ConditionHyg, msg: Str): lent BlockHyg[mdf R] -> Block#(Assert#(cond#, msg, {Void}), this),
//  lent .var[X](x: lent ReturnStmtHyg[mdf X], cont: lent ContinuationHyg[mdf X, mdf R]): mdf R -> cont#(x#, this),
//  lent .if(a: lent ConditionHyg): lent BlockIfHyg[mdf R] -> a#.ifHyg{
//    .then -> lent BlockIfTrueHyg[mdf R]{ this },
//    .else -> lent BlockIfFalseHyg[mdf R]{ this }
//    },
//  }
//
//BlockIfHyg[R]:{
//  lent ._outer: lent BlockHyg[mdf R],
//  lent .return(a: lent ReturnStmtHyg[mdf R]): lent BlockHyg[mdf R],
//  lent .assert(cond: lent ConditionHyg, msg: Str): lent BlockHyg[mdf R],
//  lent .error(a: lent ReturnStmtHyg[Void]): lent BlockHyg[mdf R], // todo: proper errors
//  lent .do(a: lent DoRunnerHyg): lent BlockHyg[mdf R],
//  }
//BlockIfTrueHyg[R]:BlockIfHyg[mdf R]{
//  .return(a) -> this._return(a#),
//    recMdf ._return(x: recMdf R): recMdf DecidedBlockHyg[mdf R] -> { x },
//  .error(a) -> this.error(a),
//  .do(a) -> this._do(a#),
//    lent ._do(v: Void): lent BlockHyg[mdf R] -> this._outer,
//  .assert(cond, msg) -> Block#(Assert#(cond#, msg, {Void}), this._outer),
//  }
//BlockIfFalseHyg[R]:BlockIfHyg[mdf R]{
//  .return(a) -> this._outer,
//  .error(a) -> this._outer,
//  .do(a) -> this._outer,
//  .assert(cond, msg) -> this._outer,
//  }
//DecidedBlockHyg[R]:BlockHyg[mdf R]{
//  recMdf ._res: recMdf R,
//  .return(a) -> this._res,
//  .do(a) -> this,
//  .assert(cond, msg) -> this,
//  .var(_,_) -> this._res,
//  .if(a) -> BlockIfFalseHyg[mdf R]{ this },
//  }
//
//ReturnStmtHyg[R]:{ lent #: mdf R }
//DoRunnerHyg:{ lent #: Void }
//ConditionHyg:{ lent #: Bool }
//ContinuationHyg[X,R]:{ lent #(x: mdf X, self: lent BlockHyg[mdf R]): mdf R }
// ------------------------------------
//Do:{ mut #: Void }
//ReturnStmt[R]:{ mut #: mdf R }
//Condition:{ mut #: Bool }
//Continuation[X,R]:{ mut #(x: mdf X, self: mut Block[mdf R]): mdf R }
////LoopBody[T]:{ mut #: ControlFlow[mdf T] }
////ControlFlow:{
////  readOnly .continue: mut ControlFlow[Void] -> {},
////  readOnly .break: mut ControlFlow[Void] -> { m -> m.break },
////  readOnly .return[T](rv: mdf T): mut ControlFlow[mdf T] -> { m -> m.return(rv) }
////  }
////ControlFlow[T]:Sealed{
////  readOnly .match[R](m: mut ControlFlowMatch[mdf T, mdf R]): mdf R -> m.continue,
////  }
////ControlFlowMatch[T,R]:{
////  mut .continue: mdf R,
////  mut .break: mdf R,
////  mut .return(rv: mdf T): mdf R,
////  }
//
//Block[R]:{
//  mut .return(a: mut ReturnStmt[mdf R]): mdf R -> a#,
//  mut .if(a: mut Condition): mut BlockIf[mdf R] -> a# ? {
//    .then -> BlockIfTrue[mdf R]{ this },
//    .else -> BlockIfFalse[mdf R]{ this },
//    },
//  mut .var[X](x: mut ReturnStmt[mdf X], cont: mut Continuation[mdf X,mdf R]): mdf R -> cont#(x#, this),
//  mut .do(a: mut Do): mut Block[mdf R] -> this._do(a#),
//  mut ._do(a: Void): mut Block[mdf R] -> this,
////  mut .loop(a: mut LoopBody[mdf R]): mut Block[mdf R] -> a#.match{
////    .continue -> this.loop(a),
////    .break -> this,
////    .return(rv) -> DecidedBlock[mdf R]{ rv },
////    },
//  }
//BlockIf[R]:{
//  mut .outer: mut Block[mdf R],
//  mut .return(a:mut ReturnStmt[mdf R]): mut Block[mdf R],
////  mut .error(a:mut ReturnStmt[Info]): mut Block[mdf R],
//  mut .do(a:mut Do): mut Block[mdf R],
//  }
//BlockIfTrue[R]:BlockIf[mdf R]{
//  .return(a) -> this._return(a#),
//  mut ._return(x: mdf R): mut DecidedBlock[mdf R] -> { x },
////  .error(a) -> Error#(a#),
//  .do(a) -> this._do(a#),
//  mut ._do(v: Void): mut Block[mdf R] -> this.outer,
//  }
//BlockIfFalse[R]:BlockIf[mdf R]{
//  .return(a) -> this.outer,
////  .error(a) -> this.outer,
//  .do(a) -> this.outer,
//  }
//DecidedBlock[R]:Block[mdf R]{
//  mut .res: mdf R,
//  .return(a) -> this.res,
//  .var(_,_) -> this.res,
//  .if(a) -> BlockIfFalse[mdf R]{this},
//  .do(a) -> this,
////  .loop(a) -> this,
//  }
