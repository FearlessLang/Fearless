package base.caps
alias base.LList[base.Str] as Path,

/// Capability for reading and writing to files and devices, including stdout and stderr.
IO:{
  mut .print(msg: Str): Void,
  mut .println(msg: Str): Void,
  mut .printErr(msg: Str): Void,
  mut .printlnErr(msg: Str): Void,
  mut .path(path: Path): mut base.caps.fs.FS,
  }
FIO:F[mut System, mut IO],Sealed{
  s -> {
    .print(msg) -> Magic!,
    .println(msg) -> Magic!,
    .printErr(msg) -> Magic!,
    .printlnErr(msg) -> Magic!,
    .path(path) -> {
      // ...
      },

    mut .fopen(path: Path, mode: FileHandleMode): mut base.caps.fs.RawFileHandle -> Magic!,
    }
  }

//IO:System[Void, IO]{
////  ._preventCreation: IOCap,
//  lent .print(msg: Str): Void -> Abort!,
//  lent .println(msg: Str): Void -> Abort!,
//  lent .printErr(msg: Str): Void -> Abort!,
//  lent .printlnErr(msg: Str): Void -> Abort!,
////  lent .openFileHandle(path: base.LList[Str], mode: FileHandleMode): lent File -> Abort!,
//  }
//FIO:FCap[System[Void], IO]{
//  #(_) -> Abort!, // unreachable
//  .lift(auth) -> {{
////    ._preventCreation -> IOCap,
//    ._auth -> FIO.lift(auth)
//    }},
//  }
//FIO':FCap[IO, IO]{
//  #(_) -> Abort!, // unreachable
//  .lift(auth) -> {{
//    //._preventCreation -> IOCap,
//    ._auth -> FIO'.lift(auth)
//    }},
//  }

//IOCap:Sealed{ .preventCreation: _IOCap }
//_IOCap:Sealed,IOCap{ _IOCap }

//FFile:{
//  .open(path: LList[Str]): FCap[IO, File] -> {
//    #(fIO) -> Do#
//      .var fh = { fIO#.openFileHandle(path) }
//      .return {{
//        .clone -> { FFile.open(path).lift(fIO) }
//        .readLine -> fh.readLine,
//        .writeLine -> fh.writeLine,
//        .close -> fh.close,
//        }},
//    .close(file) -> file.close,
//    }
//  }
//File:System[Void, File]{
//  // ... some high level methods ...
//  lent .readLine: Str,
//  lent .writeLine: Str,
//  lent .close: Void,
//  }
//FileHandle:{
//  // ... some low level methods ...
//  lent .readLine: Str,
//  lent .writeLine: Str,
//  lent .close: Void
//  }
//

FileHandleMode:Stringable,Sealed{}
Read:FileHandleMode{ "r" }
Write:FileHandleMode{ "r+" }
Create:FileHandleMode{ "w+" }
