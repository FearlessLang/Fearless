package base.json

alias base.Todo as Todo,

JsonMatch[R:iso,imm,mut,mutH,read,readH]: {
  mut .string(s: Str): R,
  mut .number(n: Float): R,
  mut .bool(b: Bool): R,
  mut .object(o: LinkedHashMap[Str,Json]): R,
  mut .array(a: List[Json]): R,
  mut .null: R,
  }
Jsons: {
  .string(s: Str): Json -> {m -> m.string(s)},
  .number(n: Float): Json -> {m -> m.number(n)},
  .bool(b: Bool): Json -> {m -> m.bool(b)},
  .object(o: LinkedHashMap[Str, Json]): Json -> {m -> m.object(o)},
  .array(a: List[Json]): Json -> {m -> m.array(a)},
  .null: Json -> {m -> m.null},
  }
Json: {
  read .match[R:iso,imm,mut,mutH,read,readH](m: mut JsonMatch[R]): R,
  .str: Str -> _JsonToStr#this,
  }

_JsonToStr: {
  #(json: Json): Str -> json.match{
    // TODO: needs to escape contents of s
    .string(s) -> "\""+s+"\"",
    .number(n) -> n.str,
    .bool(b)   -> b ? {.then -> "true", .else -> "false"},
    .object(o) -> "{"+(this.object(o))+"}",
    .array(a)  -> "["+(this.array(a))+"]",
    .null      -> "null",
    },

  .array(a: List[Json]): Str -> a.flow
    .map{json->this#json}
    .join ", ",
  .object(o: LinkedHashMap[Str,Json]): Str -> o.flow
    // TODO: escape key name
    .map{kv -> mut "\""+(kv.key)+"\": " + (this#(kv.value)) .str}
    .join ", ",
  }