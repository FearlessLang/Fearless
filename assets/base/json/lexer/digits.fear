package base.json

LexNum: {#(
  downstream: mut Sink[Token],
  ctx: mut _LexerCtx,
  e: Str,
  parent: mut Actor[mut _LexerCtx,Str,Token]
  ): ActorRes -> Block#
    .do {Block#(ctx.col++)}
//    .if {e == "."} .return {Todo!"Decimals"}
//    .if {ctx.str == "E" || (ctx.str == "e")} .return {Todo!"Exponents"}
//    .if {ctx.str == "E" || (ctx.str == "e")} .return {Todo!"Exponents"}
    .if {ctx.isDigit(e)} .return {Block#(ctx.write(e), ActorRes.continue)}
    .return {ctx.str.float.run{
      .ok(f) -> Block#(
        downstream#(Tokens.numeric(ctx.line.get, ctx.col.get, f)),
        ctx.clear,
        ctx.mode(_LexerModes.value),
        parent#(downstream, ctx, e)
        ),
      .info(i) -> Block#(
        downstream#(Tokens.unknownFragment(ctx.line.get, ctx.col.get, ctx.str)),
        ActorRes.stop
        ),
      }}
  }

//// https://stackoverflow.com/a/85413/998467
//_ParseFloat: {
//  #(chars: Str): Float -> Block#
//    .let[Opt[Nat]] mantissaPos = {chars.flow
//      #(Flow.enumerate[Str])
//      .find{ch -> ch.e == "."} // TODO: replace with .only (i.e. error if there is more than one match)
//      .map{ch -> ch.i}
//      }
//    .let[Opt[Nat]] exponentPos = {chars
//      .substring(mantissaPos.map{i -> i + 1} | 0, chars.size)
//      .flow
//      #(Flow.enumerate[Str])
//      .find{ch -> ch.e == "E" || (ch.e == "e")} // TODO: replace with .only (i.e. error if there is more than one match)
//      .map{ch -> ch.i}
//      }
//    .return {0.0},
////  #(chars: Str): Float -> chars.flow
////    .map{ch -> this.encoding(ch)}
////    #(Flow.enumerate[Nat])
////    .fold[Nat](0, {acc, ni -> Block#
////      .let digit = {ni.e}
////      .let place = {chars.size - (ni.i + 1)}
////      .return {acc + (digit * (10 ** place))}
////      }),
//
//  .encoding(ch: Str): Nat -> Block#
//    .if {ch == "0"} .return {0}
//    .if {ch == "1"} .return {1}
//    .if {ch == "2"} .return {2}
//    .if {ch == "3"} .return {3}
//    .if {ch == "4"} .return {4}
//    .if {ch == "5"} .return {5}
//    .if {ch == "6"} .return {6}
//    .if {ch == "7"} .return {7}
//    .if {ch == "8"} .return {8}
//    .if {ch == "8"} .return {8}
//    .if {ch == "9"} .return {9}
//    .return {Error.msg("Invalid digit: " + ch)},
//  }
