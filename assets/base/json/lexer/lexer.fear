package base.json

// Strictly follows ECMA-404 https://www.json.org/json-en.html
// and the identical RFC 8259 https://tools.ietf.org/html/rfc8259
LexJson: Actor[mut _LexerCtx,Str,Token]{downstream, ctx, e -> ctx.mode.match{
  .value -> Block#
    .do {e == "\n" ? {
      .then -> Block#(ctx.line++, ctx.col := 0),
      .else -> Block#(ctx.col++)
      }}
    .if {ctx.isWhitespace(e)} .return {ActorRes.continue}
    .if {ctx.isEmpty} .return {_LexStartingToken#(downstream, ctx, e)}
    .do {ctx.write(e)}
    .if {ctx.str == "true"} .return {Block#(downstream#(Tokens.true(ctx.line.get, ctx.col.get)), ctx.clear, ActorRes.continue)}
    .if {ctx.str == "false"} .return {Block#(downstream#(Tokens.false(ctx.line.get, ctx.col.get)), ctx.clear, ActorRes.continue)}
    .if {ctx.str == "null"} .return {Block#(downstream#(Tokens.null(ctx.line.get, ctx.col.get)), ctx.clear, ActorRes.continue)}
    .do {downstream#(Tokens.unknownFragment(ctx.str))}
    .return {ActorRes.stop},
  .string -> LexString#(downstream, ctx, e),
  .stringEscape -> LexStringEscapes#(downstream, ctx, e),
  .unicodeEscape(buf) -> LexUnicodeEscapes#(ctx, buf, e),
  .digits -> Todo!"Digits",
  }}

_LexerCtxs: {#: mut _LexerCtx -> Block#
  .let buffer = {mut ""}
  .let mode = {Var#[mut _LexerMode](_LexerModes.value)}
  .let isDigit = {Regexs#"[0-9]"}
  .let isWhitespace = {Regexs#"[ \\n\\r\\t]"}
  .let isChar = {Regexs#"[\\U{0020}-\\U{10FFFF}]"}
  .let unpairedSurrogate = {List.withCapacity[Nat](1)}
  .let line = {Count.nat(0)}
  .let col = {Count.nat(0)}
  .return {mut _LexerCtx: Stringable{'ctx
    read .isEmpty: Bool -> buffer.isEmpty,
    mut .write(e: Str): Void -> buffer.append(e),
    mut .clear: Void -> buffer.clear,
    .str -> buffer.str,
    mut .mode: mut _LexerMode -> mode.get,
    mut .mode(next: mut _LexerMode): Void -> mode.set(next),
    read .isDigit(ch: Str): Bool -> isDigit.isMatch(ch),
    read .isWhitespace(ch: Str): Bool -> isWhitespace.isMatch(ch),
    read .isChar(ch: Str): Bool -> isChar.isMatch(ch),
    mut .unpairedSurrogate: mut List[Nat] -> unpairedSurrogate,
    mut .line: mut Count[Nat] -> line,
    mut .col: mut Count[Nat] -> col,
    }}
  }

_LexStartingToken: Actor[mut _LexerCtx,Str,Token]{downstream, ctx, e -> Block#
  .if {ctx.isDigit(e)}
    .return {Block#(
      ctx.write(e),
      ctx.mode(_LexerModes.digits),
      ActorRes.continue
      )}
  .if {e == "\""} .return {Block#(
    ctx.mode(_LexerModes.string),
    ActorRes.continue
    )}
  .if {e == "["} .return {Block#(downstream#(Tokens.os(ctx.line.get, ctx.col.get)), ActorRes.continue)}
  .if {e == "]"} .return {Block#(downstream#(Tokens.cs(ctx.line.get, ctx.col.get)), ActorRes.continue)}
  .if {e == "{"} .return {Block#(downstream#(Tokens.oc(ctx.line.get, ctx.col.get)), ActorRes.continue)}
  .if {e == "}"} .return {Block#(downstream#(Tokens.cc(ctx.line.get, ctx.col.get)), ActorRes.continue)}
  .if {e == ","} .return {Block#(downstream#(Tokens.comma(ctx.line.get, ctx.col.get)), ActorRes.continue)}
  .if {e == ":"} .return {Block#(downstream#(Tokens.colon(ctx.line.get, ctx.col.get)), ActorRes.continue)}
  .do {ctx.write(e)}
  .return {{}}
  }

TokenMatch[R:iso,imm,mut,mutH,read,readH]: {
  mut .true: R,
  mut .false: R,
  mut .null: R,
  mut .quoted(chars: Str): R,
  mut .numeric(chars: Str): R,

  mut .os: R,
  mut .cs: R,
  mut .oc: R,
  mut .cc: R,
  mut .comma: R,
  mut .colon: R,

  // The error case:
  mut .unknownFragment(bufferContents: Str): R,
  }
Tokens: {
  .true(line: Nat, col: Nat): Token -> {
    .match(m) -> m.true,
    .line -> line,
    .col -> col,
    },
  .false(line: Nat, col: Nat): Token -> {
    .match(m) -> m.false,
    .line -> line,
    .col -> col,
    },
  .null(line: Nat, col: Nat): Token -> {
    .match(m) -> m.null,
    .line -> line,
    .col -> col,
    },
  .os(line: Nat, col: Nat): Token -> {
    .match(m) -> m.os,
    .line -> line,
    .col -> col,
    },
  .cs(line: Nat, col: Nat): Token -> {
    .match(m) -> m.cs,
    .line -> line,
    .col -> col,
    },
  .oc(line: Nat, col: Nat): Token -> {
    .match(m) -> m.oc,
    .line -> line,
    .col -> col,
    },
  .cc(line: Nat, col: Nat): Token -> {
    .match(m) -> m.cc,
    .line -> line,
    .col -> col,
    },
  .comma(line: Nat, col: Nat): Token -> {
    .match(m) -> m.comma,
    .line -> line,
    .col -> col,
    },
  .colon(line: Nat, col: Nat): Token -> {
    .match(m) -> m.colon,
    .line -> line,
    .col -> col,
    },
  .quoted(line:Nat, col:Nat, chars: Str): Token -> {
    .match(m) -> m.quoted(base.Debug#chars),
    .line -> line,
    .col -> col,
    },
  .numeric(line: Nat, col: Nat, chars: Str): Token -> {
    .match(m) -> m.numeric(chars),
    .line -> line,
    .col -> col,
    },
//  .unknownFragment(bufferContents: Str): Token -> {m -> m.unknownFragment(bufferContents)},
  .unknownFragment(bufferContents: Str): Token -> Error.msg ("Unknown fragment in JSON code:\n" + bufferContents),
  }
Token: {
  read .match[R:iso,imm,mut,mutH,read,readH](m: mut TokenMatch[R]): R,
  read .line: Nat,
  read .col: Nat,
  }

_LexerModeMatch[R:iso,imm,mut,mutH,read,readH]: {
  mut .value: R,
  mut .string: R,
  mut .stringEscape: R,
  mut .unicodeEscape(buffer: mut List[Str]): R,
  mut .digits: R,
  }
_LexerModes: {
  .value: mut _LexerMode -> {m -> m.value},
  .string: mut _LexerMode -> {m -> m.string},
  .stringEscape: mut _LexerMode -> {m -> m.stringEscape},
  .unicodeEscape: mut _LexerMode -> Block#
    .let[mut List[Str]] buffer = {List.withCapacity(4)}
    .return {{m -> m.unicodeEscape(buffer)}},
  .digits: mut _LexerMode -> {m -> m.digits},
  }
_LexerMode: {mut .match[R:iso,imm,mut,mutH,read,readH](m: mut _LexerModeMatch[R]): R}

// TODO: This should be part of the string library
//_IsDigit: {#(c: Str): Bool -> "0123456789".flow.any{n -> n == c}}
_IsWhitespace: {#(c: Str): Bool -> Block#
  .assert {c.size == 1}
  .return{(c == " ") || (c == "\n") || (c == "\r") || (c == "\t")}
  }
