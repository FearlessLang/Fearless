package base.gui
    alias base.Str as Str,
    alias base.Int as Int,
    alias base.Float as Float,
    alias base.List as List,
    alias base.Bool as Bool,
    alias base.Void as Void,
    alias base.caps.UnrestrictedIO as UnrestrictedIO,
    alias base.MF as MF,
    alias base.Main as Main,
    alias base.Block as Block,
    alias base.Nat as Nat,

GuiBuilder: {
  mut .build(title: Str): mut Void,
  mut .button(label: Str, f: mut MF[Void] ,
     slot: mut MF[mut Button,Void]): mut GuiBuilder,
  mut .canvas(height: Nat, width: Nat, gb: mut GraphicBuilder,
     slot: mut MF[mut Canvas,Void]): mut GuiBuilder,
  mut .checkBox(label: Str, f: mut MF[Void],
   	 slot: mut MF[mut CheckBox,Void]): mut GuiBuilder,
  mut .comboBox(f: mut MF[Void],
     slot: mut MF[mut ComboBox,Void],
     gb: mut MF[mut GuiBuilder, mut GuiBuilder]): mut GuiBuilder,
  mut .passwordField(defaultPw: Str, f: mut MF[Void],
  	 slot: mut MF[mut PasswordField,Void]): mut GuiBuilder,
  mut .label(label: Str, slot: mut MF[mut Label,Void]): mut GuiBuilder,
  mut .hseparator(x: Nat, y: Nat,
     slot: mut MF[mut Hseparator,Void]): mut GuiBuilder,
  mut .vseparator(x: Nat, y: Nat,
     slot: mut MF[mut Vseparator,Void]): mut GuiBuilder,
  mut .radioButton(label: Str, f: mut MF[Void],
  	 slot: mut MF[mut RadioButton,Void]): mut GuiBuilder,
  mut .textField(text: Str, events: mut MF[TextEvents,Void],
  	 slot: mut MF[mut TextField,Void]): mut GuiBuilder,
  mut .textArea(text: Str, events: mut MF[TextEvents,Void],
  	 slot: mut MF[mut TextArea,Void]): mut GuiBuilder,
  mut .flex(gb: mut MF[mut GuiBuilder, mut GuiBuilder]): mut GuiBuilder,
  mut .hbox(gb: mut MF[mut GuiBuilder, mut GuiBuilder]): mut GuiBuilder,
  mut .vbox(gb: mut MF[mut GuiBuilder, mut GuiBuilder]): mut GuiBuilder,
  mut .grid(rows: Nat, columns: Nat, gb: mut MF[mut GuiBuilder, mut GuiBuilder]): mut GuiBuilder,
}
Button: HasEnable {}
Canvas:{}
CheckBox: HasEnable{read .isSelected : Bool,}
ComboBox: HasEnable{read .selectedItem : Nat,}
Label: {}
Hseparator: {}
Vseparator: {}
PasswordField: HasEnable{}
RadioButton: HasEnable{
  read .isSelected : Bool,}
TextField: HasEnable{mut .addEvents(events: mut MF[TextEvents,Void]): TextField,}
TextArea: HasEnable{
  mut .addEvents(events: mut MF[TextEvents,Void]): TextArea,
}
HasEnable: Actionable{
 read .enable : Bool,
 mut .enable(b : Bool) :Void,
}
Actionable:{
  mut .addActionListener(listener: MF[Void]) :Void,
}
GraphicBuilder:{
  mut .line(x1: Int, y1: Int, x2: Int, y2: Int): mut GraphicBuilder,
  mut .color(r: Int, g: Int, b: Int): GraphicBuilder,
  mut .image(x: Int, y: Int, width: Int, height: Int, img: Image):
   mut GraphicBuilder,
  mut .rotate(theta: Float): mut GraphicBuilder,
  mut .translate(tx: Float, ty: Float): mut GraphicBuilder,
  mut .scale(sx: Float, sy: Float): mut GraphicBuilder,
  mut .stroke(width: Float): mut GraphicBuilder,
  mut .dashedStroke(width: Float, dashPattern: List[Float],
     dashPhase: Float): mut GraphicBuilder,
  mut .dottedStroke(width: Float, dotLength: Float,
     gapLength: Float): mut GraphicBuilder,
  mut .gapLength(name: Str, style: Int, size: Int): mut GraphicBuilder,
  mut .drawString(text: Str, x: Int, y: Int): mut GraphicBuilder,
  mut .rect(x: Int, y: Int, width: Int,
     height: Int, fill: Bool): mut GraphicBuilder,
  mut .oval(x: Int, y: Int, width: Int,
     height: Int, fill: Bool): mut GraphicBuilder,
  mut .build(g: Graphic): mut GraphicBuilder,
}
GuiEvents:{
 // mut .start(title: Str) :mut GuiEvents ->this,
  mut .stop : Void,
}
TextEvents:{
	mut .onTextChange(handler: mut MF[mut Str,Void]): TextEvents,
	mut .onKeyPress(handler: mut MF[mut Str,Void]): TextEvents,
	mut .onFocusGained(handler: mut MF[mut Void]): TextEvents,
	mut .onFocusLost(handler: mut MF[mut Void]): TextEvents,
}
Image:{}
Graphic:{}