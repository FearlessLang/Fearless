package base
alias base.caps.System as System,

Main: { #(s: mut System): Void }
Sealed: {}
Void: Sealed{}

Abort: Sealed{![R:**]: R -> this!} // can be optimised to just terminate (goes stuck)
Magic: Sealed{![R:**]: R -> this!} // magic'd out to tell us what we forgot to implement
Debug: Sealed{
  #[T:**](x: T): T -> x,
  .println[T:**](x: T): Void -> {},
  .identify[T:**](x: T): Str -> Magic!,
  }
HasIdentity: { mut .idEq(other: readH HasIdentity): Bool -> Magic! } // TODO: magic

As[X:*]: Sealed{ #(x: X): X -> x }

Let: {
  #[V:*,R:*](l: mut Let[V, R]): R -> l.in(l.var),
  }
Let[V:*,R:*]: { mut .var: V, mut .in(v: V): R }

F[R:**]: { read #: R }
F[A:**,R:**]: { read #(a: A): R }
F[A:**, B:**, R:**]: { read #(a: A, b: B): R }
F[A:**, B:**, C:**, R:**]: { read #(a: A, b: B, c: C): R }
F[A:**, B:**, C:**, D:**, R:**]: { read #(a: A, b: B, c: C, d: D): R }

MF[R:**]: { mut #: R }
MF[A:**,R:**]: { mut #(a: A): R }
MF[A:**, B:**, R:**]: { mut #(a: A, b: B): R }
MF[A:**, B:**, C:**, R:**]: { mut #(a: A, b: B, c: C): R }
MF[A:**, B:**, C:**, D:**, R:**]: { mut #(a: A, b: B, c: C, d: D): R }

Consumer[A:**]: { mut #(a: A): Void }
Consumer[A:**, B:**]: { mut #(a: A, b: B): Void }
Consumer[A:**, B:**, C:**]: { mut #(a: A, b: B, c: C): Void }

ToImm[R:imm]: { read .toImm: imm R, }
Freezer[T:*,R:imm]: { mut #(self: T): imm R }
Ice[T:imm]: { read .get: imm T }

Box[T:*]: {
  mut  .get: T,
  read .get: read T,
  imm  .get: imm T,
  }