package base

Collection: {
  read .size: Nat,
  read .isEmpty: Bool,
  // I might make this generic and have a .iter method on this
  // just need to think more about string representations first.
  }

// Done in the traditional order where adding to the end concatenates an empty list on.
// Doing the linked list in stack ordering would make getting elements much slower
LList:{ #[E]: mut LList[E] -> mut LList[E] }
LList[E]:Collection,Sealed{
  mut  .match[R](m: mut LListMatch[E, R]): R -> m.empty,
  read .match[R](m: mut LListMatchRead[E, R]): R -> m.empty,

  mut  .get(i: Nat): E -> Error.msg ("The index "+(i.str)+" is out of bounds for this list"),
  read .get(i: Nat): read/imm E -> Error.msg ("The index "+(i.str)+" is out of bounds for this list"),
  imm  .get(i: Nat): imm E -> Error.msg ("The index "+(i.str)+" is out of bounds for this list"),

  mut  .tryGet(i: Nat): mut Opt[E] -> {},
  read .tryGet(i: Nat): mut Opt[read/imm E] -> {},
  imm  .tryGet(i: Nat): mut Opt[imm E] -> {},

  mut  .head: mut Opt[E] -> {},
  read .head: mut Opt[read/imm E] -> {},
  imm  .head: mut Opt[imm E] -> {},

  mut  .tail: mut LList[E] -> this,
  read .tail: read LList[E] -> this,
  imm  .tail: LList[E] -> this,

  mut  ++(l1: mut LList[E]): mut LList[E] -> l1,
  read ++(l1: read LList[read E]): read LList[read E] -> l1,
  imm ++(l1: LList[imm E]): LList[imm E] -> l1,

  mut  +(e: E): mut LList[E] -> this ++ (mut LList[E].pushFront[](e)),
  read +(e: read E): read LList[read E] -> this ++ (read LList[read E].pushFront[](e)),
  imm  +(e: imm E): LList[imm E] -> this ++ (LList[imm E].pushFront[](e)),

  mut .iter: mut Iter[E] -> Block#
    .let[mut Var[mut LList[E]]] cursor = {Var#(this)}
    .return {{.next -> cursor.swap(cursor.get.tail).head}},
  imm .iter: mut Iter[imm E] -> Block#
    .let[mut Var[LList[E]]] cursor = {Var#(this)}
    .return {{.next -> cursor.swap(cursor.get.tail).head}},
  read .iter: mut Iter[read/imm E] -> Block#
    .let[mut Var[read LList[E]]] cursor = {Var#(this)}
    .return {{.next -> cursor.swap(cursor.get.tail).head}},

  mut  .flow: mut Flow[E] -> Block#
    .let cursor = {Var#this}
    .return {Flow.fromMutSource(RestrictFlowReuse#{'op
      .stop -> cursor := {},
      .isRunning -> cursor*.isEmpty.not,
      .step(downstream) -> Block#
        .return {(cursor.swap(cursor*.tail)).head.match{
          .some(x) -> downstream#x,
          .empty -> Block#(downstream.stop, op.stop),
          }},
      })},
  read .flow: mut Flow[read/imm E] -> Flow.fromOp[read/imm E](RestrictFlowReuse#(this._flowread)),
  read ._flowread: mut FlowOp[read/imm E] -> Block#
    .let cursor = {Var#this}
    .return {mut FlowOp[read/imm E]{'op
      .stop -> cursor := {},
      .isRunning -> cursor*.isEmpty.not,
      .step(downstream) -> (cursor.swap(cursor*.tail)).head.match{
        .some(x) -> downstream#x,
        .empty -> Block#(downstream.stop, op.stop),
        },
      }},
  imm  .flow: mut Flow[imm E] -> Flow.fromOp[imm E](RestrictFlowReuse#(this._flowimm)),
  imm  ._flowimm: mut FlowOp[imm E] -> Block#
    .let cursor = {Var#this}
    .return {mut FlowOp[imm E]{'op
      .stop -> cursor := {},
      .isRunning -> cursor*.isEmpty.not,
      .step(downstream) -> (cursor.swap(cursor*.tail)).head.match{
        .some(x) -> downstream#x,
        .empty -> Block#(downstream.stop, op.stop),
        },
      }},

  read .isEmpty: Bool -> True,
  read .size: Nat -> 0,

  mut .list: mut List[E] -> List.fromLList[E](this),

  mut .pushFront(e: E): mut LList[E] -> Let#{
    .var -> this.size + 1,
    .in(len) -> {'l
      mut  .match[R](m: mut LListMatch[E, R]): R -> m.elem(e, this),
      read .match[R](m: mut LListMatchRead[E, R]): R -> m.elem(e, this),
      imm  .match[R](m: mut LListMatchRead[E, R]): R -> m.elem(e, this),

      mut  .get(i: Nat): E -> (i == 0) ? { .then -> e, .else -> this.get[](i - 1) },
      read .get(i: Nat): read/imm E -> (i == 0) ?[read/imm E] { .then -> e, .else -> this.get[](i - 1) },
      imm  .get(i: Nat): imm E -> (i  == 0) ?[imm E] { .then -> e, .else -> this.get[](i - 1) },

      mut  .tryGet(i: Nat): mut Opt[E] -> (i == 0) ? { .then -> Opts#e, .else -> this.tryGet(i - 1) },
      read .tryGet(i: Nat): mut Opt[read/imm E] -> (i == 0) ? { .then -> Opts#[read/imm E]e, .else -> this.tryGet(i - 1) },
      imm  .tryGet(i: Nat): mut Opt[imm E] -> (i  == 0) ? { .then -> Opts#[imm E]e, .else -> this.tryGet(i - 1) },

      mut  .head: mut Opt[E] -> Opts#e,
      read .head: mut Opt[read/imm E] -> Opts#[read/imm E]e,
      imm  .head: mut Opt[imm E] -> Opts#[imm E]e,

      .tail -> this,
      ++(l1) -> (this ++ l1).pushFront(e),
      .isEmpty -> False,
      .size -> len,
      }
    },
  read .pushFront(e: E): read LList[E] -> Let#{
    .var -> this.size + 1,
    .in(len) -> {'l
      read .match[R](m: mut LListMatchRead[E, R]): R -> m.elem(e, this),
      imm  .match[R](m: mut LListMatchRead[E, R]): R -> m.elem(e, this),

      read .get(i: Nat): read/imm E -> (i == 0) ?[read/imm E] { .then -> e, .else -> this.get(i - 1) },
      imm  .get(i: Nat): imm E -> (i  == 0) ?[imm E] { .then -> e, .else -> this.get(i - 1) },

      read .tryGet(i: Nat): mut Opt[read/imm E] -> (i == 0) ? { .then -> Opts#[read/imm E]e, .else -> this.tryGet(i - 1) },
      imm  .tryGet(i: Nat): mut Opt[imm E] -> (i  == 0) ? { .then -> Opts#[imm E]e, .else -> this.tryGet(i - 1) },

      read .head: mut Opt[read/imm E] -> Opts#[read/imm E]e,
      imm  .head: mut Opt[imm E] -> Opts#[imm E]e,
      .tail -> this,
      ++(l1) -> (this ++ l1).pushFront(e),
      .isEmpty -> False,
      .size -> len,
      }
    },
//  imm  .pushFront(e: E): LList[E] -> Let#{
//      .var -> this.size + 1,
//      .in(len) -> {'l
//        imm  .match[R](m: mut LListMatchRead[E, R]): R -> m.elem(e, this),
//        read .match[R](m: mut LListMatchRead[read E, R]): R -> m.elem(e, this),
//
//        imm  .get(i: Nat): mut Opt[E] -> (i == 0) ? { .then -> Opts#[E]e, .else -> this.get[](i - 1) },
//        read .get(i: Nat): mut Opt[read E] -> (i == 0) ? { .then -> Opts#[read E]e, .else -> this.get[](i - 1) },
//
//        imm  .head: mut Opt[E] -> Opts#e,
//        read .head: mut Opt[read E] -> Opts#[read E]e,
//
//        .tail -> this,
//        ++(l1) -> (this ++ l1).pushFront[](e),
//        .isEmpty -> False,
//        .size -> len,
//        }
//      },
  }
LListMatch[E,R]: {
  mut .elem(head: E, tail: mut LList[E]): R,
  mut .empty: R,
  }
LListMatchRead[E,R]: {
  mut .elem(head: read/imm E, tail: read LList[E]): R,
  mut .empty: R,
  }

List: Sealed{
  #[E]: mut List[E] -> Magic!,
  #[E](e1: E): mut List[E] -> Magic!,
  #[E](e1: E, e2: E): mut List[E] -> Magic!,
  #[E](e1: E, e2: E, e3: E): mut List[E] -> Magic!,
  #[E](e1: E, e2: E, e3: E, e4: E): mut List[E] -> Magic!,
  #[E](e1: E, e2: E, e3: E, e4: E, e5: E): mut List[E] -> Magic!,
  #[E](e1: E, e2: E, e3: E, e4: E, e5: E, e6: E): mut List[E] -> Magic!,
  #[E](e1: E, e2: E, e3: E, e4: E, e5: E, e6: E, e7: E): mut List[E] -> Magic!,
  #[E](e1: E, e2: E, e3: E, e4: E, e5: E, e6: E, e7: E, e8: E): mut List[E] -> Magic!,
  #[E](e1: E, e2: E, e3: E, e4: E, e5: E, e6: E, e7: E, e8: E, e9: E): mut List[E] -> Magic!,
  #[E](e1: E, e2: E, e3: E, e4: E, e5: E, e6: E, e7: E, e8: E, e9: E, e10: E): mut List[E] -> Magic!,
  #[E](e1: E, e2: E, e3: E, e4: E, e5: E, e6: E, e7: E, e8: E, e9: E, e10: E, e11: E): mut List[E] -> Magic!,
  #[E](e1: E, e2: E, e3: E, e4: E, e5: E, e6: E, e7: E, e8: E, e9: E, e10: E, e11: E, e12: E): mut List[E] -> Magic!,
  #[E](e1: E, e2: E, e3: E, e4: E, e5: E, e6: E, e7: E, e8: E, e9: E, e10: E, e11: E, e12: E, e13: E): mut List[E] -> Magic!,
  #[E](e1: E, e2: E, e3: E, e4: E, e5: E, e6: E, e7: E, e8: E, e9: E, e10: E, e11: E, e12: E, e13: E, e14: E): mut List[E] -> Magic!,
  #[E](e1: E, e2: E, e3: E, e4: E, e5: E, e6: E, e7: E, e8: E, e9: E, e10: E, e11: E, e12: E, e13: E, e14: E, e15: E): mut List[E] -> Magic!,
  #[E](e1: E, e2: E, e3: E, e4: E, e5: E, e6: E, e7: E, e8: E, e9: E, e10: E, e11: E, e12: E, e13: E, e14: E, e15: E, e16: E): mut List[E] -> Magic!,
  .fromLList[E](list: mut LList[E]): mut List[E] -> Magic!,
  .withCapacity[E](capacity: Nat): mut List[E] -> Magic!,
  }
List[E]: Collection,Sealed{
  mut  .get(i: Nat): E,
  read .get(i: Nat): read/imm E,
  imm  .get(i: Nat): imm E,

  mut  .tryGet(i: Nat): mut Opt[E],
  read .tryGet(i: Nat): mut Opt[read/imm E],
  imm  .tryGet(i: Nat): mut Opt[imm E],

  mut .add(e: E): Void,
  mut +(e: E): mut List[E] -> Block#(this.add(e), this),
  mut .addAll(other: mut List[E]): Void -> other.iter.for{e -> this.add(e)},

  mut .clear: Void,

  mut  ==(eq: read F[E, E, Bool], other: mut List[E]): Bool ->
    this.size == (other.size)
    && {this.flow
      .with(other.flow)
      .all{ab -> eq#(ab.a, ab.b)}
      },
  read ==(eq: read F[read/imm E, read/imm E, Bool], other: read List[E]): Bool ->
    this.size == (other.size)
    && {this.flow
      .with(other.flow)
      .all{ab -> eq#(ab.a, ab.b)}
      },
  imm  ==(eq: F[imm E, imm E, Bool], other: List[E]): Bool ->
    this.size == (other.size)
    && {this.flow
      .with(other.flow)
      .all{ab -> eq#(ab.a, ab.b)}
      },

  mut .flow: mut Flow[E] -> Block#
    .let[mut Count[Nat]] cursor = {Count.nat(0)}
    .return {Flow.fromMutSource(RestrictFlowReuse#[E]{'self
      .isRunning -> cursor* < (this.size),
      .stop -> cursor := (this.size),
      .step(downstream) -> this.tryGet(cursor++).match{
        .some(x) -> Block#
          .do {downstream#x}
          .if {cursor.get >= (this.size)} .do {Block#(downstream.stop, self.stop)}
          .return {{}},
        .empty -> Block#(downstream.stop, self.stop),
        },
      }, this.size)},
  read .flow: mut Flow[read/imm E] -> Flow.fromOp(RestrictFlowReuse#(this._flowread(0, this.size)), this.size),
  read ._flowread(start: Nat, end: Nat): mut FlowOp[read/imm E] -> Block#
    .let[mut Count[Nat]] cursor = {Count.nat(start)}
    .let[mut Count[Nat]] endCursor = {Count.nat(end)}
    .return {{'self
      .isRunning -> cursor* < (endCursor.get),
      .stop -> cursor := (endCursor.get),
      .step(downstream) -> cursor.get < (endCursor.get) ? {
        .then -> Block#
          .do {downstream#(this.get(cursor++))}
          .if {cursor.get >= (endCursor.get)} .do {Block#(downstream.stop, self.stop)}
          .return {{}},
        .else -> Block#(downstream.stop, self.stop),
        },
      .split -> self.canSplit ? {
        .else -> {},
        .then -> Block#
          .let cur = {cursor.get}
          .let[Nat] mid = {cur + ((endCursor.get - cur) / 2)}
          .let[Nat] end' = {endCursor.swap(mid)}
          .return {Opts#(this._flowread(mid, end'))},
        },
      .canSplit -> endCursor.get - (cursor.get) > 1,
      }},
  imm .flow: mut Flow[imm E] -> Flow.fromOp(RestrictFlowReuse#(this._flowimm(0, this.size)), this.size),
  imm ._flowimm(start: Nat, end: Nat): mut FlowOp[imm E] -> Block#
    .let[mut Count[Nat]] cursor = {Count.nat(start)}
    .let[mut Count[Nat]] endCursor = {Count.nat(end)}
    .return {{'self
      .isRunning -> cursor* < (endCursor.get),
      .stop -> cursor := (endCursor.get),
      .step(downstream) -> cursor.get < (endCursor.get) ? {
        .then -> Block#
          .do {downstream#(this.get(cursor++))}
          .if {cursor.get >= (endCursor.get)} .do {Block#(downstream.stop, self.stop)}
          .return {{}},
        .else -> Block#(downstream.stop, self.stop),
        },
      // TODO: I could have a larger threshold check and refuse to split for lists that are too small here if I want
      .split -> self.canSplit ? {
        .else -> {},
        .then -> Block#
          .let cur = {cursor.get}
          .let[Nat] mid = {cur + ((endCursor.get - cur) / 2)}
          .let[Nat] end' = {endCursor.swap(mid)}
          .return {Opts#(this._flowimm(mid, end'))},
        },
      .canSplit -> endCursor.get - (cursor.get) > 1,
      }},

  mut .iter: mut Iter[E] -> Let#{
    .var -> Count.nat(0),
    .in(cursor) -> { .next -> this.tryGet(cursor++) }
    },
  read .iter: mut Iter[read/imm E] -> Let#{
    .var -> Count.nat(0),
    .in(cursor) -> { .next -> this.tryGet(cursor++) }
    },
  imm .iter: mut Iter[imm E] -> Let#{
    .var -> Count.nat(0),
    .in(cursor) -> { .next -> this.tryGet(cursor++) }
    },
  }

// Right now this is invalid if the list gets mutated for any reason, Could Repr help?
ListView[E]: List[E]{
  read .inner: read List[E],
  /// Get an item with its original RC by providing a reference to the original mutable list.
  read .expose(list: mut List[E], i: Nat): E,
  read .tryExpose(list: mut List[E], i: Nat): mut Opt[E],
  }
ListViews: {
  .subList[E](list: read List[E], from: Nat, to: Nat): read ListView[E] -> Block#
    .assert({from <= to}, "Invalid range for the list proxy, "+(from.str)+" is greater than "+(to.str))
    .assert({to <= (list.size)}, "Invalid range for the list proxy, "+(to.str)+" is greater than the list size ("+(list.size.str)+")")
    .return {{'self
      .inner -> list,
      .size -> to - from,
      .isEmpty -> self.size == 0,
      .expose(rawList, i) -> i < (self.size) ? {
        .then -> rawList.get(from + i),
        .else -> Error.msg("Index "+(i.str)+" is out of bounds for this list")
        },
      .tryExpose(rawList, i) -> i < (self.size) ? {
        .then -> rawList.tryGet(from + i),
        .else -> {}
        },
      read .get(i: Nat): read/imm E -> i < (self.size) ? {
        .then -> list.get(from + i),
        .else -> Error.msg("Index "+(i.str)+" is out of bounds for this list")
        },
      imm  .get(i: Nat): imm E -> i < (self.size) ? {
        .then -> list.get(from + i),
        .else -> Error.msg("Index "+(i.str)+" is out of bounds for this list")
        },
      read .tryGet(i: Nat): mut Opt[read/imm E] -> i < (self.size) ? {
        .then -> list.tryGet(from + i),
        .else -> {}
        },
      imm  .tryGet(i: Nat): mut Opt[imm E] -> i < (self.size) ? {
        .then -> list.tryGet(from + i),
        .else -> {}
        },
      }},

  .indexMap[E](list: read List[E], mappings: List[Nat]): read ListView[E] -> Block#
    .assert({mappings.size == (list.size)}, "The mappings list must be the same size as the original list ("+(mappings.size.str)+" vs. "+(list.size.str)+")")
    .return {{'self
      .inner -> list,
      .size -> list.size,
      .isEmpty -> list.isEmpty,
      .expose(rawList, i) -> Assert!(
        rawList.size == (mappings.size), "The provided list must be the same size as the list this is proxying ("+(rawList.size.str)+" vs. "+(mappings.size.str)+")",
        {rawList.get(mappings.get(i))}
        ),
      .tryExpose(rawList, i) -> mappings.tryGet(i).flatMap{i' -> rawList.tryGet(i')},
      .get(i) -> list.get(mappings.get(i)),
      read .tryGet(i: Nat): mut Opt[read/imm E] -> mappings.tryGet(i).flatMap{i' -> list.tryGet(i')},
      imm  .tryGet(i: Nat): mut Opt[imm E] -> mappings.tryGet(i).flatMap{i' -> list.tryGet(i')},
      }},
  }
