package base

Collection:{
  read .size: UInt,
  read .isEmpty: Bool,
  // I might make this generic and have a .iter method on this
  // just need to think more about string representations first.
  }

// Done in the traditional order where adding to the end concatenates an empty list on.
// Doing the linked list in stack ordering would make getting elements much slower
LList:{ #[E]: mut LList[E] -> mut LList[E] }
LList[E]:Collection,Sealed{
  mut  .match[R](m: mut LListMatch[E, R]): R -> m.empty,
  read .match[R](m: mut LListMatchRead[E, R]): R -> m.empty,

  mut  .get(i: UInt): E -> Error.msg ("The index "+(i.str)+" is out of bounds for this list"),
  read .get(i: UInt): read/imm E -> Error.msg ("The index "+(i.str)+" is out of bounds for this list"),
  imm  .get(i: UInt): imm E -> Error.msg ("The index "+(i.str)+" is out of bounds for this list"),

  mut  .tryGet(i: UInt): mut Opt[E] -> {},
  read .tryGet(i: UInt): mut Opt[read/imm E] -> {},
  imm  .tryGet(i: UInt): mut Opt[imm E] -> {},

  mut  .head: mut Opt[E] -> {},
  read .head: mut Opt[read/imm E] -> {},
  imm  .head: mut Opt[imm E] -> {},

  mut  .tail: mut LList[E] -> this,
  read .tail: read LList[E] -> this,
  imm  .tail: LList[E] -> this,

  mut  ++(l1: mut LList[E]): mut LList[E] -> l1,
  read ++(l1: read LList[read E]): read LList[read E] -> l1,
  imm ++(l1: LList[imm E]): LList[imm E] -> l1,

  mut  +(e: E): mut LList[E] -> this ++ (mut LList[E].pushFront[](e)),
  read +(e: read E): read LList[read E] -> this ++ (read LList[read E].pushFront[](e)),
  imm  +(e: imm E): LList[imm E] -> this ++ (LList[imm E].pushFront[](e)),

  mut .iter: mut Iter[E] -> Block#
    .let[mut Var[mut LList[E]]] cursor = {Var#(this)}
    .return {{.next -> cursor.swap(cursor.get.tail).head}},
  imm .iter: mut Iter[imm E] -> Block#
    .let[mut Var[LList[E]]] cursor = {Var#(this)}
    .return {{.next -> cursor.swap(cursor.get.tail).head}},
  read .iter: mut Iter[read/imm E] -> Block#
    .let[mut Var[read LList[E]]] cursor = {Var#(this)}
    .return {{.next -> cursor.swap(cursor.get.tail).head}},

  mut  .flow: mut Flow[E] -> Block#
    .let cursor = {Var#this}
    .var[Bool] hasStarted = {False}
    .return {Flow.fromMutSource(RestrictFlowReuse#{'op
      .stop -> cursor := {},
      .isRunning -> cursor*.isEmpty.not,
      .step(downstream) -> Block#
        .if {hasStarted.get} .return {Error.msg "LList flows cannot be reused."}
        .do {hasStarted := True}
        .return {(cursor.swap(cursor*.tail)).head.match{
          .some(x) -> downstream#x,
          .empty -> Block#(downstream.stop, op.stop),
          }},
      })},
  read .flow: mut Flow[read/imm E] -> Flow.fromOp[read/imm E](RestrictFlowReuse#(this._flowread)),
  read ._flowread: mut FlowOp[read/imm E] -> Block#
    .let cursor = {Var#this}
    .return {mut FlowOp[read/imm E]{'op
      .stop -> cursor := {},
      .isRunning -> cursor*.isEmpty.not,
      .step(downstream) -> (cursor.swap(cursor*.tail)).head.match{
        .some(x) -> downstream#x,
        .empty -> Block#(downstream.stop, op.stop),
        },
      }},
  imm  .flow: mut Flow[imm E] -> Flow.fromOp[imm E](RestrictFlowReuse#(this._flowimm)),
  imm  ._flowimm: mut FlowOp[imm E] -> Block#
    .let cursor = {Var#this}
    .return {mut FlowOp[imm E]{'op
      .stop -> cursor := {},
      .isRunning -> cursor*.isEmpty.not,
      .step(downstream) -> (cursor.swap(cursor*.tail)).head.match{
        .some(x) -> downstream#x,
        .empty -> Block#(downstream.stop, op.stop),
        },
      }},

  read .isEmpty: Bool -> True,
  read .size: UInt -> 0,

  mut .list: mut List[E] -> List.fromLList[E](this),

  mut .pushFront(e: E): mut LList[E] -> Let#{
    .var -> this.size + 1,
    .in(len) -> {'l
      mut  .match[R](m: mut LListMatch[E, R]): R -> m.elem(e, this),
      read .match[R](m: mut LListMatchRead[E, R]): R -> m.elem(e, this),
      imm  .match[R](m: mut LListMatchRead[E, R]): R -> m.elem(e, this),

      mut  .get(i: UInt): E -> (i == 0) ? { .then -> e, .else -> this.get[](i - 1) },
      read .get(i: UInt): read/imm E -> (i == 0) ?[read/imm E] { .then -> e, .else -> this.get[](i - 1) },
      imm  .get(i: UInt): imm E -> (i  == 0) ?[imm E] { .then -> e, .else -> this.get[](i - 1) },

      mut  .tryGet(i: UInt): mut Opt[E] -> (i == 0) ? { .then -> Opts#e, .else -> this.tryGet(i - 1) },
      read .tryGet(i: UInt): mut Opt[read/imm E] -> (i == 0) ? { .then -> Opts#[read/imm E]e, .else -> this.tryGet(i - 1) },
      imm  .tryGet(i: UInt): mut Opt[imm E] -> (i  == 0) ? { .then -> Opts#[imm E]e, .else -> this.tryGet(i - 1) },

      mut  .head: mut Opt[E] -> Opts#e,
      read .head: mut Opt[read/imm E] -> Opts#[read/imm E]e,
      imm  .head: mut Opt[imm E] -> Opts#[imm E]e,

      .tail -> this,
      ++(l1) -> (this ++ l1).pushFront(e),
      .isEmpty -> False,
      .size -> len,
      }
    },
  read .pushFront(e: E): read LList[E] -> Let#{
    .var -> this.size + 1,
    .in(len) -> {'l
      read .match[R](m: mut LListMatchRead[E, R]): R -> m.elem(e, this),
      imm  .match[R](m: mut LListMatchRead[E, R]): R -> m.elem(e, this),

      read .get(i: UInt): read/imm E -> (i == 0) ?[read/imm E] { .then -> e, .else -> this.get(i - 1) },
      imm  .get(i: UInt): imm E -> (i  == 0) ?[imm E] { .then -> e, .else -> this.get(i - 1) },

      read .tryGet(i: UInt): mut Opt[read/imm E] -> (i == 0) ? { .then -> Opts#[read/imm E]e, .else -> this.tryGet(i - 1) },
      imm  .tryGet(i: UInt): mut Opt[imm E] -> (i  == 0) ? { .then -> Opts#[imm E]e, .else -> this.tryGet(i - 1) },

      read .head: mut Opt[read/imm E] -> Opts#[read/imm E]e,
      imm  .head: mut Opt[imm E] -> Opts#[imm E]e,
      .tail -> this,
      ++(l1) -> (this ++ l1).pushFront(e),
      .isEmpty -> False,
      .size -> len,
      }
    },
//  imm  .pushFront(e: E): LList[E] -> Let#{
//      .var -> this.size + 1,
//      .in(len) -> {'l
//        imm  .match[R](m: mut LListMatchRead[E, R]): R -> m.elem(e, this),
//        read .match[R](m: mut LListMatchRead[read E, R]): R -> m.elem(e, this),
//
//        imm  .get(i: UInt): mut Opt[E] -> (i == 0) ? { .then -> Opts#[E]e, .else -> this.get[](i - 1) },
//        read .get(i: UInt): mut Opt[read E] -> (i == 0) ? { .then -> Opts#[read E]e, .else -> this.get[](i - 1) },
//
//        imm  .head: mut Opt[E] -> Opts#e,
//        read .head: mut Opt[read E] -> Opts#[read E]e,
//
//        .tail -> this,
//        ++(l1) -> (this ++ l1).pushFront[](e),
//        .isEmpty -> False,
//        .size -> len,
//        }
//      },
  }
LListMatch[E,R]:{
  mut .elem(head: E, tail: mut LList[E]): R,
  mut .empty: R,
  }
LListMatchRead[E,R]:{
  mut .elem(head: read/imm E, tail: read LList[E]): R,
  mut .empty: R,
  }

List:{
  #[E]: mut List[E] -> _List.new(Var#(_ListState#[E](0, {}))),
  #[E](e1: E): mut List[E] -> this.fromLList[E](mut LList[E].pushFront(e1)),
  #[E](e1: E, e2: E): mut List[E] -> this.fromLList[E](mut LList[E].pushFront(e2).pushFront(e1)),
  // TODO: this up to 12 or something
  #[E](e1: E, e2: E, e3: E): mut List[E] -> this.fromLList[E](mut LList[E].pushFront(e3).pushFront(e2).pushFront(e1)),
  #[E](e1: E, e2: E, e3: E, e4: E): mut List[E] -> this.fromLList[E](mut LList[E].pushFront(e4).pushFront(e3).pushFront(e2).pushFront(e1)),
  .fromLList[E](list: mut LList[E]): mut List[E] -> _List.new(Var#(_ListState#[E](list.size, list))),
  }
_List:{
  .new[E](s: mut Var[mut _ListState[E]]): mut List[E] -> {'l
    .size -> s*.size,
    .isEmpty -> s*.inner.isEmpty,
    .get(i) -> s*.inner.get(i),
    .tryGet(i) -> s*.inner.tryGet(i),
    .add(e) -> s := (_ListState#[E](s*.size + 1, s*.inner + e)),
    }
  }
List[E]: Collection,Sealed{
  mut  .get(i: UInt): E,
  read .get(i: UInt): read/imm E,
  imm  .get(i: UInt): imm E,

  mut  .tryGet(i: UInt): mut Opt[E],
  read .tryGet(i: UInt): mut Opt[read/imm E],
  imm  .tryGet(i: UInt): mut Opt[imm E],

  mut .add(e: E): Void,
  mut .addAll(other: mut List[E]): Void -> other.iter.for{e -> this.add(e)},

  mut .flow: mut Flow[E] -> Block#
    .let[mut Count[UInt]] cursor = {Count.uint(0)}
    .return {Flow.fromMutSource(RestrictFlowReuse#[E]{'self
      .isRunning -> cursor* < (this.size),
      .stop -> cursor := (this.size),
      .step(downstream) -> this.tryGet(cursor++).match{
        .some(x) -> Block#
          .do {downstream#x}
          .if {cursor.get >= (this.size)} .do {Block#(downstream.stop, self.stop)}
          .return {{}},
        .empty -> Block#(downstream.stop, self.stop),
        },
      }, this.size)},
  read .flow: mut Flow[read/imm E] -> Flow.fromOp(RestrictFlowReuse#(this._flowread), this.size),
  read ._flowread: mut FlowOp[read/imm E] -> Block#
    .let[mut Count[UInt]] cursor = {Count.uint(0)}
    .return {{'self
      .isRunning -> cursor* < (this.size),
      .stop -> cursor := (this.size),
      .step(downstream) -> this.tryGet(cursor++).match{
        .some(x) -> Block#
          .do {downstream#x}
          .if {cursor.get >= (this.size)} .do {Block#(downstream.stop, self.stop)}
          .return {{}},
        .empty -> Block#(downstream.stop, self.stop),
        },
      }},
  imm .flow: mut Flow[imm E] -> Flow.fromOp(RestrictFlowReuse#(this._flowimm), this.size),
  imm ._flowimm: mut FlowOp[imm E] -> Block#
    .let[mut Count[UInt]] cursor = {Count.uint(0)}
    .return {{'self
      .isRunning -> cursor* < (this.size),
      .stop -> cursor := (this.size),
      .step(downstream) -> this.tryGet(cursor++).match{
        .some(x) -> Block#
          .do {downstream#x}
          .if {cursor.get >= (this.size)} .do {Block#(downstream.stop, self.stop)}
          .return {{}},
        .empty -> Block#(downstream.stop, self.stop),
        },
      }},

  mut .iter: mut Iter[E] -> Let#{
    .var -> Count.uint(0),
    .in(cursor) -> { .next -> this.tryGet(cursor++) }
    },
  read .iter: mut Iter[read/imm E] -> Let#{
    .var -> Count.uint(0),
    .in(cursor) -> { .next -> this.tryGet(cursor++) }
    },
  imm .iter: mut Iter[imm E] -> Let#{
    .var -> Count.uint(0),
    .in(cursor) -> { .next -> this.tryGet(cursor++) }
    },
  }
_ListState[E]:{
  read .size: UInt,
  mut .inner: mut LList[E],
  read .inner: read LList[E],
  }
_ListState:{
  #[E](len: UInt, inner: mut LList[E]): mut _ListState[E] -> {
    .size -> len,
    .inner -> inner
    }
  }

/// A list that can be appended to, then iterated over. Elements cannot be removed from this list.
/// After the list is built, it may no longer be modified. This data structure is equivalent to
/// Java's SpinedBuffer.
AppendList[E]: Collection{
  mut  .get(i: UInt): mut Opt[E],
  read .get(i: UInt): mut Opt[read E],
  imm  .get(i: UInt): iso Opt[imm E],
  mut .append(e: E): Void,
  }
