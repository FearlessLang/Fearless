package base

Error: {
  ![R:read,mut,imm,iso,mutH,readH](info: Info): R -> Magic!,
  .msg[R:read,mut,imm,iso,mutH,readH](msg: Str): R -> this!(Infos.msg msg)
  }

Todo: {
  ![R:read,mut,imm,iso,mutH,readH]: R -> Error.msg[R] "TODO: Implement this code",
  ![R:read,mut,imm,iso,mutH,readH](msg: Str): R -> Error.msg[R]("TODO: " + msg),
  }

Unreachable: {
  ![R:read,mut,imm,iso,mutH,readH]: R -> Error.msg[R] "Unreachable code reached",
  ![R:read,mut,imm,iso,mutH,readH](msg: Str): R -> Error.msg[R]("Unreachable code reached: " + msg),
  }

/// Strong exception safety is upheld:
/// The operation has either completed successfully or thrown an exception,
// leaving the program state exactly as it was before the operation started.
Try: {
  #[R](try: read F[R]): mut Action[R] -> Magic!,
  #[T:iso,imm,mut,read,R](data: iso T, try: read F[iso T, R]): mut Action[R] -> Magic!,
  }

Info: Sealed{
  .msg: Str,
  .map: LinkedHashMap[Str, Info],
  .list: List[Info],
  .accept[R](visitor: InfoVisitor[R]): R,
  .str: Str -> this.accept[Json](_InfoToJson).str,
  }
Infos: {
  .msg(msg: Str): Info -> {'info
    .msg -> msg,
    .list -> List#,
    .map -> Maps.hashMap({k1, k2 -> k1 == k2}, {k -> k}),
    .accept(visitor) -> visitor.msg(info),
    },
  .list(list: List[Info]): Info -> {'info
    .msg -> "",
    .list -> list,
    .map -> Maps.hashMap({k1, k2 -> k1 == k2}, {k -> k}),
    .accept(visitor) -> visitor.list(info),
    },
  .map(map: LinkedHashMap[Str, Info]): Info -> {'info
    .msg -> "",
    .list -> List#,
    .map -> map,
    .accept(visitor) -> visitor.map(info),
    },
  }
InfoVisitor[R]: {
  .msg(info: Info): R,
  .list(info: Info): R,
  .map(info: Info): R,
  }

_InfoToJson: InfoVisitor[Json]{
  .msg(info) -> Jsons.string(info.msg),
  .list(info) -> Jsons.array(info.list.flow.map{info' -> info'.accept(this)}.list),
  .map(info) -> Todo!"Collecting a flow into a map",
  }
