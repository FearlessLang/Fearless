package base

Error: {
  ![R:read,mut,imm,iso,mutH,readH](info: Info): R -> Magic!,
  .msg[R:read,mut,imm,iso,mutH,readH](msg: Str): R -> this!{
    .msg -> msg,
    .list -> List#,
    .map -> EmptyMap[Str, Info]
    }
  }

Todo: {
  ![R:read,mut,imm,iso,mutH,readH]: R -> Error.msg[R] "TODO: Implement this code",
  ![R:read,mut,imm,iso,mutH,readH](msg: Str): R -> Error.msg[R]("TODO: "+msg),
}

/// Strong exception safety is upheld:
/// The operation has either completed successfully or thrown an exception,
// leaving the program state exactly as it was before the operation started.
Try: {
  #[R](try: read Try[R]): mut Res[R,Info] -> Magic!,
  }
Try[R]:{ read #: R, }

Info: Sealed,_InfoToJson{
  .msg: Str,
  .map: Map[Str, Info],
  .list: List[Info],
  .str: Str -> _InfoToJson#this,
  }
Infos: {
  .msg(msg: Str): Info -> {
    .msg -> msg,
    .list -> List#,
    .map -> EmptyMap[Str, Info],
    },
  .list(list: List[Info]): Info -> {
    .msg -> "",
    .list -> list,
    .map -> EmptyMap[Str, Info],
    },
  .map(map: Map[Str, Info]): Info -> {
    .msg -> "",
    .list -> List#,
    .map -> map,
    },
  }

_InfoToJson: {#(info: Info): Str -> Block#
  .if {info.msg.isEmpty.not} .return {"\""+(info.msg)+"\""}
  .if {info.list.isEmpty.not} .return {"["+(this.list(info.list))+"]"}
  .if {info.map.isEmpty.not} .return {Todo! "Flows over maps are not implemented yet"}
  .return {Error.msg "Unreachable"},

  .list(l: List[Info]): Str -> l.flow
    .map{info->this#info}
    #(Flow.str ","),
  }
