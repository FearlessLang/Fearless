package base.flows

_SeqFlow: _FlowFactory{
  .fromOp[E](source: mut FlowOp[E], size: Opt[Nat]): mut Flow[E] -> _RestrictFlowReuse#{'self
    .unwrapOp(_) -> source,
    // non-terminals
    .filter(p) -> this.fromOp(_Filter#({s->s}, source, p), {}),

    .map(f) -> this.fromOp(_Map#({s->s}, source, f), size),
    .map(ctx, f) -> this.fromOp(_Map#({s->s}, source, ctx, f), size),

    .flatMap(f) -> this.fromOp(_FlatMap#({s->s}, source, f), {}),
    mut .actor[S,R](state: iso S, f: read ActorImpl[S,E,R]): mut Flow[imm R] ->
      this.fromOp(_Actor#[S,E,R]({s->s}, source, state, f), {}),
    mut .actorMut[S,R](state: iso S, f: read ActorImplMut[S,E,R]): mut Flow[R] ->
      this.fromOp(_Actor.anyRet[S,E,R]({s->s}, source, state, f), {}),
    .limit(n) -> this.fromOp(_Limit#({s->s}, source, n), _LimitSize#(n, size)),
//    .with(other) -> this.fromOp(_With#({s->s}, source, other.unwrapOp(mut _UnwrapFlowToken)), {}),

    // terminals
    mut .first: mut Opt[E] -> _First[E]#(source, {s->s}),
    mut .findMap[R](f: read F[E, mut Opt[R]]): mut Opt[R] -> _FindMap[E,R]#(source, f, {s->s}),
    mut .fold[S](acc: iso MF[S], f: read F[S,E,S]): S -> _Fold[S,E]#(source, acc#, f, {s->s}),
    .size -> size,
    .count -> size.match{
      .some(n) -> n,
      .empty -> self.fold[Nat]({0}, {acc, _ -> acc + 1}),
      },
    },

  #[E](e: E): mut Flow[E] -> Block#
    .let[mut Var[mut Opt[E]]] seq = { Vars#(Opts#e) }
    .let[mut FlowOp[E]] source = {{'self
      .isRunning -> seq.get.isSome,
      .stopUp -> seq := {},
      .step(downstream) -> seq.swap(mut Opt[E]).match{
        .some(x) -> Block#(downstream#x, self.stopUp, downstream.stopDown),
        .empty -> {},
        },
      .for(downstream) -> seq.swap(mut Opt[E]).match{
        .some(x) -> Block#(downstream#x, self.stopUp, downstream.stopDown),
        .empty -> {},
        },
      }}
    .return {this.fromOp(source, Opts#1)},
  }
