package base.flows

Joinable[T]: { .join(flow: mut Flow[T]): T }

RestrictFlowReuse: {
  #[E](f: mut FlowOp[E]): mut FlowOp[E] -> Block#
    .var[Bool] stopped = {False}
    .return {{
      .isRunning -> f.isRunning,
      .stop -> Block#
        .do {stopped := True}
        .return {f.stop},
      .step(downstream) -> stopped.get ? {
        .then -> Error.msg "This flow cannot be reused.",
        .else -> f.step(downstream),
        },
      .forRemaining(downstream) -> stopped.get ? {
        .then -> Error.msg "This flow cannot be reused.",
        .else -> f.forRemaining(downstream),
        },
      .isFinite -> f.isFinite,
      .split -> stopped.get ? {
        .then -> Error.msg "This flow cannot be reused.",
        .else -> f.split.map{op -> RestrictFlowReuse#op},
        },
      }}
  }

// Prevents any issues arising from someone mutating the thing the flow is going over
// from within the flow itself. This is prevented by collecting the flow-source into a list and then
// flowing on that instead.
_MutSourceCollection[E]: {
  #(source: mut FlowOp[E]): mut Flow[E] -> Flow.fromOp(Block#[mut FlowOp[E]]
    .let[mut Var[mut Opt[mut FlowOp[E]]]] cloned = {Var#[mut Opt[mut FlowOp[E]]]{}}
    .return{{
      .isRunning -> this.get(cloned, source).isRunning,
      .stop -> this.get(cloned, source).stop,
      .step(downstream) -> this.get(cloned, source).step(downstream),
      }}),
  .get(cloned: mut Var[mut Opt[mut FlowOp[E]]], original: mut FlowOp[E]): mut FlowOp[E] -> cloned.get.match{
     .some(cloned') -> cloned',
     .empty -> Block#
       .let[mut List[E]] dup = {Flow.fromOp(original).list}
       .do {cloned := (Opts#(Block#[mut FlowOp[E]]
         .let[mut Count[Nat]] cursor = {Count.nat(0)}
         .return {RestrictFlowReuse#{'self
           .isRunning -> cursor* < (dup.size),
           .stop -> cursor := (dup.size),
           // TODO: also add .forRemaining
           .step(downstream) -> dup.tryGet(cursor++).match{
             .some(x) -> downstream#x,
             .empty -> Block#(downstream.stop, self.stop),
             },
           }}))}
       .return{cloned.get!},
     },
  }

_FlowConverters: Sealed{
  .range(start: Int, end: Int): mut Flow[Int] -> _FlowRange#(start, end),
//  .range(start: Int, end: Int): mut Flow[Int] -> _PipelineParallelFlow.fromOp[Int](this.range'(start, end), Opts#((end - start).nat)),
//  .range'(start: Int, end: Int): mut FlowOp[Int] -> Block#
//    .let cursor = {Count.int(start)}
//    .return {RestrictFlowReuse#{'self
//      .isRunning -> cursor* < end,
//      .stop -> cursor := end,
//      .step(downstream) -> Block#
//        .do {downstream#(cursor <- {n -> n + +1})}
//        .if {cursor* >= end} .do {Block#(downstream.stop, self.stop)}
//        .return {{}},
//      .forRemaining(downstream) -> Block#
//        .loop {Block#
//          .if {cursor* >= end} .return {Block#(downstream.stop, self.stop, ControlFlow.break)}
//          .do {downstream#(cursor <- {n -> n + +1})}
//          .return {ControlFlow.continue}
//          }
//        .return {{}},
//      }}
  }
_FlowRange: {
  #(start: Int, end: Int): mut Flow[Int] -> Magic!,
  }

// Variants of the converter methods that do not clone if is safe to do so. Invoked by magic
_SafeSource: {
//  .fromIter[E](iter: mut base.iter.Iter[E]): mut Flow[E] -> Flow.fromOp[E](this.fromIter'[E](iter)),
//  .fromIter'[E](iter: mut base.iter.Iter[E]): mut FlowOp[E] -> Block#
//    .let[mut Var[Bool]] isRunning = {Var#[Bool]True}
//    .return {{'op
//      .stop -> isRunning := False,
//      .isRunning -> isRunning*,
//      .step(downstream) -> isRunning* ? {
//        .then -> iter.next.match{
//          .some(x) -> downstream#x,
//          .empty -> Block#(downstream.stop, op.stop),
//          },
//        .else -> op.stop,
//        }
//      }},

  .fromList[E](list: mut List[E]): mut Flow[E] -> Flow.fromOp[E](this.fromList'[E](list, 0, list.size), list.size),
  .fromList'[E](list: mut List[E], start: Nat, end: Nat): mut FlowOp[E] -> Block#
    .let[mut Count[Nat]] cursor = {Count.nat(start)}
    .let[mut Count[Nat]] endCursor = {Count.nat(end)}
    .return {RestrictFlowReuse#{'self
      .isRunning -> cursor* < (endCursor.get),
      .stop -> cursor := (endCursor.get),
      .step(downstream) -> cursor.get < (endCursor.get) ? {
        .then -> Block#
          .do {downstream#(list.get(cursor++))}
          .if {cursor.get >= (endCursor.get)} .do {Block#(downstream.stop, self.stop)}
          .return {{}},
        .else -> Block#(downstream.stop, self.stop),
        },
      .forRemaining(downstream) -> Block#
        .loop {Block#
          .if {cursor.get >= (endCursor.get)} .return {Block#(downstream.stop, self.stop, ControlFlow.break)}
          .do {downstream#(list.get(cursor++))}
          .return {ControlFlow.continue}
          }.return {{}},
      .split -> self.canSplit ? {
        .else -> {},
        .then -> Block#
          .let cur = {cursor.get}
          .let[Nat] mid = {cur + ((endCursor.get - cur) / 2)}
          .let[Nat] end' = {endCursor.swap(mid)}
          .return {Opts#(this.fromList'(list, mid, end'))},
        },
      .canSplit -> endCursor.get - (cursor.get) > 1,
      }},
  }
