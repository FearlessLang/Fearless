package base
Str: Sealed,Stringable{
  .size: Nat,
  .isEmpty: Bool,
  +(other: Str): Str,
  ==(other: Str): Bool,
  .assertEq(other: Str): Void,
  .assertEq(message: Str, other: Str): Void,
  }
Stringable: {
  read .str: Str,
  }
_StrInstance: Str{
  .size -> Magic!,
  .isEmpty -> Magic!,
  .str -> Magic!,
  +(other) -> Magic!,
  ==(other) -> Magic!,
  .assertEq(other) -> Magic!,
  .assertEq(message, other) -> Magic!,
  }

_StrHelpers: {
  .assertEq(expected: Str, actual: Str): Void ->
    Assert!(expected == actual, "Expected: "+expected+"\nActual: "+actual, {{}}),
  .assertEq(message: Str, expected: Str, actual: Str): Void ->
    Assert!(expected == actual, message+"\nExpected: "+expected+"\nActual: "+actual, {{}}),
  }

StrMap[V]: LinkedLens[Str, V]{ k1, k2 -> k1 == k2 }
