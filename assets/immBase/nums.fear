package base

Int:Sealed,MathOps[Int],IntOps[Int]{
  readOnly .nat: Nat,
  readOnly .float: Float,
  // not Stringable due to limitations of the Java codegen target
  readOnly .str: Str,
  }
Nat:Sealed,MathOps[Nat],IntOps[Nat]{
  readOnly .int: Int,
  readOnly .float: Float,
  // not Stringable due to limitations of the Java codegen target
  readOnly .str: Str,
  }
Float:Sealed,MathOps[Float]{
  readOnly .int: Int,
  readOnly .nat: Nat,
  readOnly .round: Int,
  readOnly .ceil: Int,
  readOnly .floor: Int,
  readOnly **(n: readOnly Float): Float, // pow
  readOnly .isNaN: Bool,
  readOnly .isInfinity: Bool,
  readOnly .isNegInfinity: Bool,
  // not Stringable due to limitations of the Java codegen target
  readOnly .str: Str,
  }

MathOps[T]:Sealed{
  readOnly +(n: readOnly T): T,
  readOnly -(n: readOnly T): T,
  readOnly *(n: readOnly T): T,
  readOnly /(n: readOnly T): T,
  readOnly %(n: readOnly T): T,
  readOnly .abs: T,

  // Comparisons
  readOnly >(n: readOnly T): Bool,
  readOnly <(n: readOnly T): Bool,
  readOnly >=(n: readOnly T): Bool,
  readOnly <=(n: readOnly T): Bool,
  readOnly ==(n: readOnly T): Bool,
  }
IntOps[T]:Sealed{
  // bitwise
  readOnly >>(n: readOnly T): T,
  readOnly <<(n: readOnly T): T,
  readOnly ^(n: readOnly T): T,
  readOnly &(n: readOnly T): T,
  readOnly |(n: readOnly T): T,

  readOnly **(n: readOnly Nat): T, // pow
  }

// Fake concrete type for all numbers. The real implementation is generated at code-gen.
_IntInstance:Int{
  .nat -> Abort!,
  .float -> Abort!,
  .str -> Abort!,
  +(n) -> Abort!,
  -(n) -> Abort!,
  *(n) -> Abort!,
  /(n) -> Abort!,
  %(n) -> Abort!,
  **(n) -> Abort!,
  .abs -> Abort!,

  // bitwise
  >>(n) -> Abort!,
  <<(n) -> Abort!,
  ^(n) -> Abort!,
  &(n) -> Abort!,
  |(n) -> Abort!,

  // Comparisons
  >n -> Abort!,
  <n -> Abort!,
  >=n -> Abort!,
  <=n -> Abort!,
  ==n -> Abort!,
  }
_NatInstance:Nat{
  .int -> Abort!,
  .float -> Abort!,
  .str -> Abort!,
  +(n) -> Abort!,
  -(n) -> Abort!,
  *(n) -> Abort!,
  /(n) -> Abort!,
  %(n) -> Abort!,
  **(n) -> Abort!,
  .abs -> Abort!,

  // bitwise
  >>(n) -> Abort!,
  <<(n) -> Abort!,
  ^(n) -> Abort!,
  &(n) -> Abort!,
  |(n) -> Abort!,

  // Comparisons
  >n -> Abort!,
  <n -> Abort!,
  >=n -> Abort!,
  <=n -> Abort!,
  ==n -> Abort!,
  }
_FloatInstance:Float{
  .int -> Abort!,
  .nat -> Abort!,
  .str -> Abort!,
  .round -> Abort!,
  .ceil -> Abort!,
  .floor -> Abort!,
  +(n) -> Abort!,
  -(n) -> Abort!,
  *(n) -> Abort!,
  /(n) -> Abort!,
  %(n) -> Abort!,
  **(n) -> Abort!,
  .abs -> Abort!,
  // Comparisons
  >n -> Abort!,
  <n -> Abort!,
  >=n -> Abort!,
  <=n -> Abort!,
  ==n -> Abort!,
  }
